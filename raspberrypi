# setup Raspberry Pi image
sudo apt install rpi-imager

sudo apt update
sudo apt upgrade
sudo apt install python3-pip
sudo apt install nginx

dmesg | grep -i attached
umount /dev/sda1 /dev/sda2
sudo dd if=/dev/sda of=rasp.img bs=4M status=progress
sudo dd if=rasp.img of=/dev/sda bs=4M status=progress

[.vimrc] FILE
"Вырубаем режим совместимости с VI:
set nocompatible

"Включаем распознавание типов файлов и типо-специфичные плагины:
filetype on
filetype plugin on
syntax on "Включить подсветку синтаксиса

" Настройки табов для Python, согласно рекоммендациям
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab "Ставим табы пробелами
set softtabstop=4 "4 пробела в табе

" Вырубаем черточки на табах
set showtabline=1
set nu "Включаем нумерацию строк

"Автоотступ
"set autoindent
""Подсвечиваем все что можно подсвечивать
let python_highlight_all = 1 
"Включаем 256 цветов в терминале, мы ведь работаем из иксов?
""Нужно во многих терминалах, например в gnome-terminal
set t_Co=256

"Настройка omnicomletion для Python (а так же для js, html и css)
autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS

"set rtp+=~/.vim/tabnine-vim
[.vimrc] END
mkdir .vim && cd .vim
git clone --depth 1 https://github.com/codota/tabnine-vim

ssh-keygen -t rsa -b 4096 -C "your_email@domain.com"
ssh-copy-id username@host

sudo apt-get install mosquitto-clients

sudo screen /dev/ttyUSB0 115200
ubuntu:ubuntu

certbot renew --dry-run

# network
ls /sys/class/net
sudo vim /etc/netplan/50-cloud-init.yaml

network:
    ethernets:
        eth0:
            dhcp4: true
            optional: true
    version: 2
    wifis:
        wlan0: 
            optional: true
            access-points:
                "WIFI":
                    password: "pass"
            dhcp4: true

sudo netplan --debug apply
ip a

sudo vim /etc/wpa_supplicant/wpa_supplicant.conf

network={
    ssid="WIFI"
    psk="pass"
    id_str="home"
}

network={
    ssid="WIFI"
    psk="pass"
    id_str="mobile"
}

# service
sudo systemctl daemon-reload
sudo systemctl enable test-py.service
sudo systemctl start test-py.service
sudo systemctl status test-py.service
sudo systemctl stop test-py.service
sudo systemctl restart test-py.service
# file [/lib/systemd/system/test-py.service]
[Unit]
After=network.target

[Service]
Type=simple
User=root
Group=root
ExecStart=/usr/bin/python3 /home/ubuntu/al.py
StandardInput=tty-force
KillMode=process
Restart=always
TimeoutStartSec=10
RestartSec=10
    
[Install]
WantedBy=multi-user.target

# reverse shell, see: https://www.tunnelsup.com/raspberry-pi-phoning-home-using-a-reverse-remote-ssh-tunnel/
     crontab -e => for local user
sudo crontab -e => for root user
*/1 * * * * ~/create_ssh_tunnel.sh &> /dev/nul
chmod 700 ~/create_ssh_tunnel.sh
[create_ssh_tunnel.sh] FILE
#!/bin/bash
createTunnel() {
  /usr/bin/ssh -N -R 2222:localhost:22 serverUser@25.25.25.25
  if [[ $? -eq 0 ]]; then
    echo Tunnel to jumpbox created successfully
  else
    echo An error occurred creating a tunnel to jumpbox. RC was $?
  fi
}
/bin/pidof ssh
if [[ $? -ne 0 ]]; then
  echo Creating new tunnel connection
  createTunnel
fi
[] END
