curl -X GET 'localhost:9200/' OR curl -XGET 127.0.0.1:9200 OR curl 127.0.0.1:9200 OR curl localhost:9200
curl -X GET 'localhost:9200/_cat/nodes?v&pretty'
curl -X GET 'localhost:9200/_cat/indices?v&pretty'
curl -X GET 'localhost:9200/_cluster/health?pretty'

[bin/curlj]
1 #!/bin/bash
2 /usr/bin/curl -H"Content-Type: application/json" "$@"

# mappings
curl -XPUT -H"Content-Type: application/json" 127.0.0.1:9200/movies -d '{"mappings": {"properties": {"year": {"type":"date"}}}}'
# keyword => no text analyzer, "fields": { "raw": {"type": "keyword"} } => copy of the field without text analyzer for sorting
curl -XPUT -H"Content-Type: application/json" 127.0.0.1:9200/movies -d '{"mappings": {"properties": {
       "id": {"type":"integer"},
       "year": {"type":"date"},
       "genre": {"type":"keyword"},
       "title": {"type":"text",
                 "analyzer":"english",
                 "fields": { "raw": {"type": "keyword"} }
                }
}}}'
# fielddata => you can aggs on this field, but on the terms
curl -XPUT -H"Content-Type: application/json" 127.0.0.1:9200/ratings -d '{"mappings": {"properties": {
       "title": {"type":"text",
                 "fielddata":true
                }
}}}'
curlj -XPUT 127.0.0.1:9200/series -d '{"mappings": {"properties": {
"film_to_franchise": {"type":"join",
                      "relations": {"franchise":"film"}}
}}}'
curl -X GET 'localhost:9200/movies/_settings?pretty'
curlj -XPUT 'localhost:9200/new_index' -d '{
       "settings": {
              "number_of_shards": 10,
              "number_of_replicas": 1
       }
}'
# index time with N-grams
curlj -XPUT 'localhost:9200/movies?pretty' -d '{
  "settings": {
    "analysis": {
      "filter": {
        "autocomplete_filter": {
          "type": "edge_ngram",
          "min_gram": 1,
          "max_gram": 20
        }
      },
      "analyzer": {
        "autocomplete": { 
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "autocomplete_filter"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "autocomplete", 
        "search_analyzer": "standard" 
      }
    }
  }
}'
# test analyzer
curlj -XGET localhost:9200/movies/_analyze?pretty -d '{
       "analyzer": "autocomplete",
       "text": "Sta"
}'
curlj -XPUT 127.0.0.1:9200/movies/_mapping?pretty -d '{
       "properties": {
              "title": {
                     "type":"text",
                     "analyzer": "autocomplete"}
              }
       }
}'
# query-time ! "analyzer": "standard" to not match "t" from [t,tr,tra,trac,track] !
curlj -XGET 127.0.0.1:9200/movies/_search?pretty -d '{
  "query": {
    "match": {
      "title": {
        "query": "tr",
        "analyzer": "standard"
      }
    }
  }
}'
curl 127.0.0.1:9200/movies/_mappings

# add a new record
curl -XPOST -H"Content-Type: application/json" 127.0.0.1:9200/movies/_doc/109487 -d '{"genres":["IMAX","Sci-Fi"], "title":"Interstellar", "year":2014}'
curl 127.0.0.1:9200/movies/_search?pretty
wget http://media.sundog-soft.com/es7/movies.json
curlj -XPUT 127.0.0.1:9200/_bulk?pretty --data-binary @movies.json
# REPLACE the record and update his _seq_no and _version
curlj -X[POST|PUT] 127.0.0.1:9200/movies/_doc/109487 -d '{"title":"Interstellar2", "year":2015}'
# update the record
curlj -XPOST 127.0.0.1:9200/movies/_doc/109487/_update -d '{"doc":{"title":"Interstellar2", "year":2015}}'
# update with concurency
# full update/replace
curlj -XPUT '127.0.0.1:9200/movies/_doc/109487?if_seq_no=16&if_primary_term=3' -d '{"genres":["IMAX","Sci-Fi"], "title":"Interstellar", "year":2014}'
# partial update (with _update and POST)
curlj -XPOST '127.0.0.1:9200/movies/_doc/109487/_update?if_seq_no=16&if_primary_term=3' -d '{"doc":{"title":"Interstellar2", "year":2015}}'

# add multiple
wget http://media.sundog-soft.com/es7/shakes-mapping.json
curl -H "Content-Type: application/json" -XPUT localhost:9200/shakespeare --data-binary @shakes-mapping.json
wget http://media.sundog-soft.com/es7/shakespeare_7.0.json
curl -H "Content-Type: application/json" -XPOST 'localhost:9200/shakespeare/_bulk' --data-binary @shakespeare_7.0.json
wget http://media.sundog-soft.com/es7/series.json
curlj -XPUT 'localhost:9200/_bulk?pretty' --data-binary @series.json
curlj -XPUT 'localhost:9200/_bulk?pretty' --data-binary @movies.json

# search (query lite / URI Search)
      &from=0 &size=200 &sort=title.raw &_source_includes=title,year &pretty
      &q=title:star &q=+year:2010+title:star
curl '127.0.0.1:9200/movies/_search?q=title:star&pretty'
curl '127.0.0.1:9200/movies/_search?q=title:star&_source_includes=title,year&pretty'
curl '127.0.0.1:9200/movies/_search?q=+year:2010+title:star'
curl '127.0.0.1:9200/movies/_search?q=+year>2010+title:star'  # didn't work without urlencode
curl '127.0.0.1:9200/movies/_search?q=+year:>2010+title:star' # didn't work without urlencode

# search
curl 127.0.0.1:9200/movies/_doc/109487?pretty
curl 127.0.0.1:9200/movies/_doc/109487 | jq '. | {found: .found}' OR curl 127.0.0.1:9200/movies/_doc/109487 | jq .found
curl localhost:9200/movies/_search?pretty
# paging, maxsize = 10_000 default = 10
curlj localhost:9200/movies/_search?pretty -d '{
       "from": 0,
       "size": 2,
       "sort": [{"year": "desc"}, "title.raw"],
       "query": {
              "match_all": {}
       }
}'
# phrase, slop => words between search terms
curl -H "Content-Type: application/json" -XGET 'localhost:9200/shakespeare/_search?pretty' -d '{
       "query": {
              "match_phrase": {"text_entry": "to be or not to be", slop: 2}
       }
}'
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "match": {"genre": "Sci-Fi"}
       }
}'
# partial matching
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "prefix": {"title": "episode"}
       }
}'
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "wildcard": {"title": "ep*"}
       }
}'
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "regexp": {"title": "ep.*"}
       }
}'
# query-time search (search as you type), ! "analyzer": "standard" to not match "t" from [t,tr,tra,trac,track] !
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "match_phrase_prefix": {
                     "title": {"query": "star tr",
                               "slop": 10,
                               "analyzer": "standard"
                              }
              }
       }
}'
# filter
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "bool": {
                     "must": { "term": { "title": "Sci-Fi" } },
                     "filter": [
                            { "range": { "year": { "gte":   2010 } } },
                            { "term": { "year": 2014 } },
                            { "terms": { "year": [2014, 2025] } },
                            { "exists": { "field": "tags" } }
                     ]
              }
       }
}'
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "bool": {
                     "must":     { "match": { "genre": "Sci-Fi" } },
                     "must_not": { "match": { "title": "trek" } },
                     "filter":   { "range": { "year": { "gte":   2010, "lt": 2015 } } }
              }
       }
}'
# fuzziness, levenshtein edit distance - number of changes to match, or "AUTO"
curlj -XGET 'localhost:9200/movies/_search?pretty' -d '{
       "query": {
              "fuzzy": {
                     "title": { "value": "intrsteller", "fuzziness": 2 }
              }
       }
}'
# movies with franchise "star wars"
curlj localhost:9200/series/_search?pretty -d '{"query": {
"has_parent": {"parent_type": "franchise",
               "query": {"match": {"title":"star wars"}}
              }
}}' | jq .hits.hits[]._source.title
# franchise for movies with "star wars"
curlj localhost:9200/series/_search?pretty -d '{"query": {
"has_child": {"type": "film",
               "query": {"match": {"title":"star wars"}}
              }
}}'

# search by a term
curl 127.0.0.1:9200/movies/_search?q=Action | jq -C | less -R
curl 127.0.0.1:9200/movies/_search | jq .hits.hits[0]._source.id  # get first id
curl 127.0.0.1:9200/movies/_search | jq '.hits.hits[]._source.id' # get all id's
curl 127.0.0.1:9200/movies/_search | jq '.hits.hits[0] | {id:._source.id}' # return a result as JSON object
curl 127.0.0.1:9200/movies/_search | jq '[ .hits.hits[] | {id:._source.id} ]' # return a result as JSON ARRAY object

# agregates, size=0 => don't get search result of the query, only aggregates, "terms" => like function count
curlj -XGET 'localhost:9200/ratings/_search?size=0&pretty' -d '{
       "query":{"match":{"rating":5.o}},
       "query":{"match_phrase":{"title":"Star Wars Episode IV"}},
       "aggs": {
              "ratings":     {"terms": {"field": "rating"}},
              "avg_ratings": {"avg":   {"field": "rating"}}
       }

}'
# histograms, like function count, release => count up movies from each decade
curlj -XGET 'localhost:9200/ratings/_search?size=0&pretty' -d '{
       "aggs": {
              "whole_ratings": {
                     "histogram": {
                            "field": "rating",
                            "interval": 1.0
                     }
              },
              "release": {
                     "histogram": {
                            "field": "year",
                            "interval": 10
                     }
              }
       }

}'
# timeseries
curlj -XGET 'localhost:9200/ratings/_search?size=0&pretty' -d '{
       "query":{"match":{"agent":"Googlebot"}},
       "aggs": {
              "timestamp": {
                     "date_histogram": {
                            "field": "@timestamp",
                            "interval": "hour"
                     }
              }
       }

}'
# nested aggregations
curlj -XGET 'localhost:9200/ratings/_search?size=0&pretty' -d '{
       "query":{"match_phrase":{"title":"Star Wars"}},
       "aggs": {
              "titles": {
                     "terms": {
                            "field": "title.raw"
                     },
                     "aggs": {
                            "avg_rating": {
                                   "avg": {
                                          "field": "rating"
                                   }
                            }
                     }
              }
       }

}'

# aliases
curlj -XPOST 'localhost:9200/_aliases' -d '{
       "actions": [
              {"add": {"alias":"logs_current", "index":"logs_2017_06"}},
              {"remove": {"alias":"logs_current", "index":"logs_2017_05"}},
              {"add": {"alias":"logs_last_3_months", "index":"logs_2017_06"}},
              {"remove": {"alias":"logs_last_3_months", "index":"logs_2017_03"}}
       ]
}'

# xpack
curlj -XPOST 'localhost:9200/_xpack/sql?format=txt' -d '{
       "query": "DESCRIBE movies"
}'
curlj -XPOST 'localhost:9200/_xpack/sql?format=txt' -d '{
       "query": "SELECT title, year FROM movies WHERE year < 2000 ORDER BY year LIMIT 10"
}'
# sql to json query
curlj -XPOST 'localhost:9200/_xpack/sql/translate?pretty' -d '{
       "query": "SELECT title, year FROM movies WHERE year < 2000 ORDER BY year LIMIT 10"
}'
# didn't work
docker exec -it elasticsearch /bin/bash -i -c "cd /usr/share/elasticsearch && bin/elasticsearch-sql-cli"

# delete
curl -XDELETE 127.0.0.1:9200/movies/_doc/109487
curl -XDELETE 127.0.0.1:9200/movies # DELETE ALL INDEX
