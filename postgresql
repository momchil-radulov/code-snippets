# Install
sudo apt update
sudo apt upgrade
sudo apt install postgresql postgresql-contrib
sudo systemctl status postgresql
sudo -i -u postgres
psql
	List databases: \l ; Quit: \q ; List users: \du ; \c mydb 
# As postgres user in psql:
CREATE USER iotuser WITH PASSWORD 'yourpassword';
CREATE DATABASE iotdb;
GRANT ALL PRIVILEGES ON DATABASE iotdb TO iotuser;
ALTER ROLE iotuser SET timezone TO 'UTC';
ALTER ROLE iotuser SET client_encoding TO 'utf8';
SELECT rolname, rolconfig FROM pg_roles WHERE rolname = 'iotuser';
SHOW timezone;
SHOW client_encoding;
SHOW default_transaction_isolation;


psql -U dbuser -h localhost -d copied_1675085997
$sudo -u postgres psql -d copied_1675085997
$sudo -i -u postgres psql OR $sudo -i -u postgres;  $psql
CREATE USER dbuser WITH ENCRYPTED PASSWORD 'astrongpassword';
(OR AFTER CREATE) ALTER USER dbuser WITH ENCRYPTED PASSWORD 'anewstrongpassword';
ALTER USER dbuser CREATEDB;
CREATE DATABASE websitedb ENCODING 'UTF8' OWNER dbuser;
(OR AFTER CREATE)
GRANT ALL PRIVILEGES ON DATABASE websitedb TO dbuser;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO dbuser;

$sudo -u postgres createuser dbuser
$sudo -u postgres createdb websitedb

# docker
docker run --name postgres_main -p 5432:5432 -e POSTGRES_PASSWORD=123456789 -d postgres
docker stop postgres_main
docker start postgres_main
docker container rm postgres_main

sudo apt install -y postgresql-client-common
sudo apt install -y postgresql-client
# install psql v.12
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |sudo tee  /etc/apt/sources.list.d/pgdg.list
sudo apt update
sudo apt -y install postgresql-client-12 [OR] sudo apt install -y postgresql-client

psql postgresql://postgres:123456789@host.com:5432/development_db
psql 'postgresql://postgres:123456789@host.com:5432/development_db' -c 'COPY (SELECT * FROM public.jobs) TO STDOUT;' > jobs.csv
cat jobs.csv | psql postgresql://postgres:123456789@localhost:5432/development_db -c "COPY public.jobs FROM STDIN;"

psql -V [OR] psql --version
[~/.pgpass]
host_name.com:5432:db_name:user_name:password
chmod 600 ~/.pgpass
psql -h host_name.com -U user_name db_name
>SELECT version();
>\?         # help, list available commands
>\l         # list database
>\c db user # connect to database as user
>\dn        # list schemas
>\dt        # list tables
>\d "table" # describe table
>\dv        # list views
>\df        # list functions
>\du        # list users and roles
>\q         # quit/exit
>\x         # set Expanded display to On/Off
>select "Column" from "Table" where "Column" = 'string';
>\i file_name.sql  # execute commands/sql from external file

# python
pip install sandman2
pip install psycopg2-binary # for postgresql
sandman2ctl -d sqlite:////home/user_name/projects/test/users.db
sandman2ctl 'postgresql://user_name:password@host_name.com/db_name'

# SQL
=> groups by "column_name" and return first rows of the group, based on ordering by some_columns !!
SELECT DISTINCT ON ("column_name") column_aliases, another_column ORDER BY some_columns;

=> window function, return ALL ROWS,
=>     GROUP FUNCTIONS woriking on grouping by PARTITION BY and ordering by ORDER BY !!
SELECT
  FIRST_VALUE("column_name") OVER (
		PARTITION BY group_name
		ORDER BY
			price
	),
  -- from previous row (OR with n-previous row, if LAG("column_name", n)
  LAG("column_name") OVER (
		PARTITION BY another_column_name
		ORDER BY
			price
	),
  LAST_VALUE("column_name") OVER (
		PARTITION BY group_name
		ORDER BY
			price
	),
  -- rows with the same values will get the same rank 
  RANK() OVER (
		PARTITION BY group_name
		ORDER BY
			price
	),
  ROW_NUMBER() OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS ROW_NUMBER
  another_column
  ORDER BY some_columns;

# Размер на таблиците
sudo -i -u postgres psql
\c db_name
\d+
SELECT
    schemaname AS schema,
    relname AS table_name,
    pg_size_pretty(pg_total_relation_size(relid)) AS total_size
FROM
    pg_catalog.pg_statio_user_tables
ORDER BY
    pg_total_relation_size(relid) DESC
LIMIT 10;

gzip db.sql
gzip -t db.sql.gz  # test
gunzip db.sql.gz
zcat db.sql.gz | head -n 10
zgrep "CREATE TABLE" db.sql.gz
zcat db.sql.gz | tail -n 10

DELETE FROM "DeviceLogs" WHERE "Time" < EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - INTERVAL '3 months'));
DELETE FROM "ErrorLogs" WHERE "CreatedOn" < CURRENT_TIMESTAMP - INTERVAL '3 months';
DELETE FROM "DeviceCommunicationLogs" WHERE "DateTime" < CURRENT_TIMESTAMP - INTERVAL '3 months';

# дефрагментиране и оптимизация
PostgresQL: VACUUM FULL; VACUUM ANALYZE;
MySQL:      mysqlcheck -o my_database
sqlite:     VACUUM;
