USER STORY MAPPING - from here to extract workflows, names of functions and data structures
DRY - Don't repeat yourself
    Single source of truth.
    Every data field with unique name. [TABLENAME_FIELDNAME, FK=PK, JOIN_TABLE:PK={TABLENAME_ID,TABLENAME2_ID,TYPE_JOIN,INDEX}]
    Every data record with unique EVENT_ID, TRANSACTION_ID, TIMESTAMP, STATUS, [OWNER, GROUP, PERMISSIONS [Like Linux]]
KISS - Keep it simple
    Use it or lose it.
GLOBAL MODULES - every application must have
    app instance: ctx.app, ctx.major_version, ctx.minor_version, ctx.patch_version => application name and version
    settings:     ctx.config => file (for default values) -> url -> env -> args (overload previous)
    logging:      ctx.log
    persistents:
        database: ctx.db
        cache:    ctx.cache
    current user: ctx.user, ctx.role, ctx.roles
    How to use: ctx.config.get('port') => return string value or None
                ctx.config.set('port', '8080') => to set a string value or string JSON value
TDD - Test Driven Development
    First write test code and test after every change of code.
EVENT SOURCING - Capture all changes to an application state as a sequence of events.
CQRS - Command Query Responsibility Segregation
    Queries:  Return a result and do not change the observable state of the system (are free of side effects), use DAL.
    Commands: Change the state of a system but do not return a value.
        CommandBus: must have exactly one handler for each command, for DATABASE TRANSACTIONS.
        EventBus:   can have 0 or many handlers subscribed to every event.
RESTFULL API with JSON - basic public API for every application
                       - one resource - only one entry point in whole API
                       - list of roles with full access, list of roles with limited access (e.g. only records of the user) 
MICROSERVICE ARCHITECTURE with API GATEWAY - composition over inheritance

- group similar functionality, functions and data in modules and classes
- don't expose data, expose behavior
- one function - make only one thing [high Cohesion, loose Coupling]

Function
- pure functions [deterministic, no side effects], immutable data [result is only return data]
- command - do not return a value, only Error Code [like C, BASH]
1. five lines of code
2. pass or call
3. only one IF without else
   example: function assert_not_null(arg)
            function to handle ENUM [e.g. a array to return a sub function/sub class for this enum]
            move = handleKeyToMove(key): return move_functions_to_key[enum.LEFT] # (moveLeft)
            move(5)
            commandbus to handle ENUM [e.g. multiple handlers for different values of this enum]
