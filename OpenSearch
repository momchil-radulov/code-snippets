# install opensearch
## install
curl -o- https://artifacts.opensearch.org/publickeys/opensearch.pgp | sudo apt-key add -
echo "deb https://artifacts.opensearch.org/releases/bundle/opensearch/2.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/opensearch-2.x.list
echo "deb https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/2.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/opensearch-dashboards-2.x.list
sudo apt-get update
sudo apt list -a opensearch
sudo apt list -a opensearch-dashboards
sudo apt-get install opensearch
sudo apt-get install opensearch-dashboards
sudo apt-get upgrade opensearch
sudo apt-get upgrade opensearch-dashboards
## enable and run
sudo systemctl enable opensearch
sudo systemctl start opensearch
sudo systemctl status opensearch
sudo systemctl enable opensearch-dashboards
sudo systemctl start opensearch-dashboards
sudo systemctl status opensearch-dashboards
## test
curl -X GET https://localhost:9200 -u 'admin:admin' --insecure
## urls
curl -X GET https://localhost:9200/_cat/plugins?v -u 'admin:admin' --insecure  # get plugins

## settings

[/etc/opensearch/opensearch.yml]
network.host: 0.0.0.0
discovery.type: single-node
plugins.security.disabled: true

## disable opensearch-dashboards security plugin
cd /usr/share/opensearch-dashboards
bin/opensearch-dashboards-plugin list
sudo bin/opensearch-dashboards-plugin remove --allow-root securityDashboards

[/etc/opensearch-dashboards/opensearch_dashboards.yml]
server.host: 0.0.0.0 OR server.host: localhost
opensearch.hosts: [http://localhost:9200]
#opensearch_security.multitenancy.enabled: true
#opensearch_security.multitenancy.tenants.preferred: [Private, Global]
#opensearch_security.readonly_mode.roles: [kibana_read_only]
## Use this setting if you are running opensearch-dashboards without https
#opensearch_security.cookie.secure: false

## restart
sudo systemctl restart opensearch
sudo systemctl restart opensearch-dashboards
## test
curl http://localhost:9200
curl http://localhost:5601 -u 'admin:admin' --insecure
## urls
curl http://localhost:9200/_cat/plugins?v

sudo netstat -ltnp

# nginx proxy, 216.58.212.14 => replace with your ip
sudo systemctl stop nginx
sudo systemctl status nginx
sudo systemctl start nginx
sudo systemctl reload nginx.service
#log
$systemctl status nginx.service
$journalctl -xe
[sudo vim /etc/nginx/sites-enabled/default]
server {
        listen 216.58.212.14:9200;
        client_max_body_size 10M;
        location / {
                proxy_pass http://localhost:9200;
        }
}

# schema
PUT /documents
{
  "mappings": {
    "dynamic": "strict",
    "properties": {
      "fileName": {
        "type": "keyword"
      },
      "id": {
        "type": "integer"
      },
      "hash": {
        "type": "keyword"
      },
      "content": {
        "type": "text"
      },
      "content_raw": {
        "type": "text",
        "index": false
      }
    }
  },
  "settings" : {
    "index" : {
      "number_of_shards": 2,
      "number_of_replicas": 2
    }
  }
}

# query
GET documents/_search
{ "size": 1000,
  "_source": ["fileName"],
  "query": {
    "bool": {
      "must": [
        {"match": {"content": "hello world"}},
        {"term": {"id": 8787}},
        {"wildcard": {"fileName": {"value": "*note*", "case_insensitive": true}}}
      ] 
    } 
  }
}

# update fileName, replace \ (windows style) with / (linux style), hello\world -> hello/world
POST documents/_update_by_query
{
  "script":
  {
      "lang": "painless",
      "inline": "ctx._source.fileName = ctx._source.fileName.replace('\\\\', '/')"
  },
  "query":
        {"wildcard": {"fileName": {"value": "*\\\\*"}}}
}

# search for hello\world\file_name, \\\\ json escape -> \\ escape for opensearch
GET documents/_count
GET documents/_search
{ "query":
    {"wildcard": {"fileName": {"value": "*\\\\*"}}}
}

# opensearch to csv, see https://stackoverflow.com/questions/18892560/is-there-any-way-in-elasticsearch-to-get-results-as-csv-file-in-curl-api
curl -X GET 'http://localhost:9200/myindex/item/_search?from=0&size=0' -d '
    {"from": 0,
    "size": 0,
    "facets": {
      "sourceResource.subject.name": {
        "global": true,
        "terms": {
          "order": "count",
          "size": 20,
          "all_terms": true,
          "field": "sourceResource.subject.name.not_analyzed"
        }
      }
    },
    "sort": [
      {
        "_score": "desc"
      }
    ],
    "query": {
      "filtered": {
        "query": {
          "match_all": {}
        }
      }
    }
  }' | jq -r '.facets["subject"].terms[] | [.term, .count] | @csv'
