# install
sudo apt update
sudo apt install nginx
# uninstall apache
sudo systemctl stop apache2
sudo apt purge apache2 apache2-utils apache2-bin apache2.2-common
sudo apt autoremove

# enable/disable
sudo systemctl enable nginx
sudo systemctl disable nginx
sudo systemctl is-enabled nginx
# start/stop/restart
sudo systemctl start nginx
sudo systemctl stop nginx
sudo systemctl restart nginx
sudo systemctl status nginx

# view logs
$ lnav, goaccess, tail

sudo vim /etc/nginx/sites-available/your-site
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name yourdomain.com;
    root /var/www/html/your-site;
    client_max_body_size 50M;

    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php5.6-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;

        fastcgi_read_timeout 300;
        fastcgi_send_timeout 300;
    }
    client_body_timeout 300;
    client_header_timeout 300;
    keepalive_timeout 300;

    location ~ /\.ht {
        deny all;
    }
}

sudo ln -s /etc/nginx/sites-available/your-site /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx

sudo vim [/etc/php/5.6/fpm/php.ini]
display_errors = Off
log_errors = On
error_log = /var/log/php5.6-fpm.log
memory_limit = 128M
post_max_size = 8M
upload_max_filesize = 2M
max_execution_time = 30

sudo systemctl restart php5.6-fpm


# mysite
sudo vim /etc/nginx/sites-available/my_site
[my_site]
server {
    listen 80;
    server_name my_site.com;
    root /var/www/my_site;
    index index.html index.htm index.php;
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    location ~* \.(ico|css|js|gif|jpe?g|png)(\?[0-9]+)?$ {
        expires max;
        log_not_found off;
    }
    location / {
        try_files $uri $uri/ /index.php?$query_string =404;
    }
    location ~ \.php$ {
        include fastcgi.conf;
        # include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php8.3-fpm.sock;
        # fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # here set you version of php
    }
    # Конфигурация за обратен прокси
    location /proxy/ {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass_request_headers on;
        # Премахване на /proxy от URL
        rewrite ^/proxy/(.*) /$1 break;
    }
}
[end my_site]
sudo ln -s /etc/nginx/sites-available/my_site /etc/nginx/sites-enabled/
sudo nginx -t  # test configuration
sudo systemctl restart nginx

# proxy pass example
location /api/Device/GetDeviceInfo {
        proxy_pass http://localhost:8080;
        proxy_pass_request_headers on;
}

location /api {
    auth_basic           "Administrator’s Area";
    auth_basic_user_file /etc/apache2/.htpasswd; 
}

# url rewrite example
location / {
        rewrite ^/api/v1/Device/GetDeviceInfo(.*)$ /api/v2/Device/GetDeviceInfo$1 last;

# poxy opensearch
[sudo vim /etc/nginx/sites-enabled/default]
server {
        listen you_public_ip_address:9200;
        client_max_body_size 10M;
        location / {
                proxy_pass http://localhost:9200;
        }
}

# remove nginx server version from headers
curl --head you_site.com
...
Server: nginx/1.18.0
...
[/etc/nginx/nginx.conf]
[/etc/nginx/sites-enabled/*]
add this to a http, server, or location context
server_tokens off;

# test nginx configuration
$ sudo nginx -t
$ sudo systemctl reload nginx

# basic authorization
sudo apt install apache2-utils
sudo htpasswd -c /etc/apache2/.htpasswd user1



# PROXY PASS
## PHP
<?php
$url = 'http://your-domain.com/' . $_SERVER['REQUEST_URI'];
$data = file_get_contents('php://input');  // Взима POST данните

$options = [
    'http' => [
        'method' => $_SERVER['REQUEST_METHOD'],
        'header' => getallheaders(),  // Предава всички хедъри
        'content' => $data,
    ],
];

$context = stream_context_create($options);
$response = file_get_contents($url, false, $context);

// Предава оригиналните хедъри от целевия сървър
foreach ($http_response_header as $header) {
    header($header);
}

echo $response;
?>
