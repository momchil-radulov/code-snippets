#backup
sudo mysqldump --databases admin_db | gzip > admin_db_$(date +%Y-%m-%d).sql.gz
gunzip < admin_db_2025-07-19.sql.gz | sudo mysql admin_db
gunzip < admin_db_2024-12-19.sql.gz | mysql -u [потребител] -p admin_db
df -h

sudo mysql clientdb_name < clientdb_backup.sql
sudo mysql < clientdb_backup_with_create_database.sql

mysqldump -u [потребител] -p --databases admin_db --no-data > admin_db_structure_$(date +%Y-%m-%d).sql
mysqldump -u [потребител] -p admin_db big_table --where="created_at >= '2024-12-01'" > incremental_backup_big_table_$(date +%Y-%m-%d).sql
mysqldump -u [потребител] -p admin_db --ignore-table=admin_db.big_table > admin_db_data_$(date +%Y-%m-%d).sql

# VACUUM ANALYZE;
SET SESSION group_concat_max_len = 1000000;
SELECT CONCAT('OPTIMIZE TABLE ', GROUP_CONCAT(TABLE_NAME), ';') 
    FROM INFORMATION_SCHEMA.TABLES 
    WHERE TABLE_SCHEMA = 'вашата_база';
#=> След това копирате резултата и го изпълнявате.
SELECT CONCAT('ANALYZE TABLE ', GROUP_CONCAT(TABLE_NAME), ';') 
    FROM INFORMATION_SCHEMA.TABLES 
    WHERE TABLE_SCHEMA = 'вашата_база';
#=> След това копирате резултата и го изпълнявате.

              -o / --optimize  # използвайте по РЯДКО
mariadb-check -o --all-databases -u root -p
mysqlcheck    -o --all-databases -u root -p
              -a / --analyze  # използвайте по ЧЕСТО
mariadb-check -a --all-databases -u root -p
mysqlcheck    -a --all-databases -u root -p

# raw hdd access
sudo modprobe nbd
sudo qemu-nbd --connect=/dev/nbd0 /var/snap/multipass/common/data/multipassd/vault/instances/php/ubuntu-20.04-server-cloudimg-amd64.img
sudo mount /dev/nbd0p1 /mnt
cd /mnt
...
sudo umount /mnt
sudo qemu-nbd --disconnect /dev/nbd0
sudo rmmod nbd

# install
sudo apt update
sudo apt install mariadb-server
sudo systemctl start mariadb
sudo systemctl status mariadb
sudo systemctl is-enabled mariadb
CREATE USER 'admin_usr1'@'localhost' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON my_database.* TO 'admin_usr1'@'localhost';
FLUSH PRIVILEGES;
SHOW GRANTS FOR 'admin_usr1'@'localhost';

# install mysql
sudo apt-get purge mysql-server mysql-client mysql-common mysql-server-core-8.0 mysql-client-core-8.0
sudo apt-get install mysql-server

# uninstall
sudo apt update
sudo dpkg --configure -a
sudo apt upgrade
sudo apt remove mysql*
sudo rm -fr /var/log/mysql
sudo rm -fr /etc/mysql

# ip add/remove
sudo ip addr add 192.168.1.98/24 dev lo
sudo ip addr del 192.168.1.98/24 dev lo

# къде са конфигурационните файлове, обикновенно
# /etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf
mysqld --help --verbose | grep -A 1 'Default options are read from the following files'
/etc/mysql/my.cnf обикновенно включва /etc/mysql/mysql.conf.d/mysqld.cnf
ако имаме достъп до mysql конзолата: SHOW VARIABLES;

# премахване на аутентикацията
sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
sudo vim /etc/mysql/mariadb.conf.d/50-server.cnf  # MariaDB
[mysqld]
skip-grant-tables
sql_mode = "ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION"
default_authentication_plugin=mysql_native_password
ngram_token_size=4 # Fulltext Search word splitting
ft_min_word_len=3           # Fulltext Search min word len, MyISAM
innodb_ft_min_token_size=3  # Fulltext Search min word len, InnoDB

SHOW VARIABLES LIKE 'ngram_token_size';
SHOW VARIABLES LIKE 'ft_min_word_len';

SELECT user, host, plugin FROM mysql.user WHERE user = 'admin_usr1';
CREATE USER 'admin_usr1'@'localhost' IDENTIFIED WITH mysql_native_password BY 'you_password';
GRANT ALL PRIVILEGES ON you_database.* TO 'admin_usr1'@'localhost';
FLUSH PRIVILEGES;

SET sql_mode = '';  -- only for current session !
# после fix ако пропадне update !!!
sudo apt update
# skip-grant-tables !!!
sudo dpkg --configure -a
sudo apt upgrade
tail -f /var/log/mysql/error.log

# за стари клиенти
default-authentication-plugin=mysql_native_password

sudo systemctl restart mysql.service

# включване на sql query logs
/etc/mysql/mysql.conf.d/mysqld.cnf
[mysqld]
general_log = 1
general_log_file = /var/log/mysql/mysql.log

# phpmyadmin restore
SHOW CREATE DATABASE database_name;
DROP DATABASE database_name;
CREATE DATABASE `database_name` /*!40100 DEFAULT CHARACTER SET utf8mb3 */ /*!80016 DEFAULT ENCRYPTION='N' */;
mysql database_name < database_name.sql
gunzip < admin_db_2024-12-19.sql.gz | sudo mysql database_name

# sql backup
mysqldump -u user -p --skip-comments --skip-extended-insert --skip-dump-date --compact --single-transaction --quick mydatabase > backup.sql
# sql schema backup
mysqldump -u user -p --no-data mydatabase > schema.sql

SELECT @@sql_mode;
SHOW VARIABLES LIKE 'sql_mode';
SET sql_mode = '';  -- only for current session
ALTER TABLE users
    ADD COLUMN wage DECIMAL(5,2),
    ADD COLUMN salary DECIMAL(7,2) AFTER is_salary;
SET sql_mode = '<original value>';  -- OR disconnect session

mysql -u root -ppassword123 database_name < /path/to/dumpfile.sql
$mysql db_name
>SHOW DATABASES;
>USE my_database;
>SHOW TABLES;
>DESCRIBE table_name;

# дефрагментиране и оптимизация
PostgresQL: VACUUM FULL; VACUUM ANALYZE;
MySQL:      mysqlcheck -o my_database
sqlite:     VACUUM;

# смяна на паролата на root
# Спри MySQL сървъра:
sudo systemctl stop mysql
# Стартирай MySQL в безопасен режим:
sudo mkdir -p /var/run/mysqld  # ако не съществува
sudo chown mysql:mysql /var/run/mysqld  # ако не съществува
sudo chmod 755 /var/run/mysqld  # ако не съществува
sudo mysqld_safe --skip-grant-tables &
# Влез в MySQL като root потребител без парола:
mysql -u root
# В MySQL конзолата изпълни следните команди за смяна на паролата:
USE mysql;
FLUSH PRIVILEGES;
UPDATE user SET plugin='mysql_native_password' WHERE User='root';
FLUSH PRIVILEGES;
ALTER USER 'root'@'localhost' IDENTIFIED BY 'новата_парола';
FLUSH PRIVILEGES;
# Излез от MySQL конзолата:
exit;
# Стартирай MySQL сървъра отново:admin_db
sudo systemctl start mysql

# cli
mysql -u USER -pPASSWORD -D database_name -Bse "SELECT products_json FROM orders where order_num = '123';" | ./decode_unicode.sh | jq
[decode_unicode.sh]
#!/bin/python3
import sys
print(sys.stdin.read().replace('\\\\', '\\').encode('utf-8').decode('unicode_escape'))

# socat
sudo socat -v TCP-LISTEN:3306,reuseaddr,fork,bind=10.125.184.1 TCP:127.0.0.1:3306

### SQL ###
CREATE TABLE modulename4tablename (
  modulename4tablename_id int NOT NULL AUTO_INCREMENT,
  modulename4tablename_column_name_modulename4tablename_id int NULL,
  modulename4tablename_column_name int NOT NULL DEFAULT '0',
  modulename4tablename_updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  modulename4tablename_created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (modulename4tablename_id)
) ENGINE=InnoDB AUTO_INCREMENT=123 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

## JSON ##
UPDATE job_schedule 
    SET params = JSON_SET(params, '$.to', 'mail@domain.com') 
    WHERE id = 349;

## reset_admin_db.sh 2025-08-15 ##
#!/bin/bash
set -e  # Спира при грешка

DB_NAME="admin_db"

# Ако е подаден аргумент → ползваме него за дата, иначе вземаме днешната
if [[ -n "$1" ]]; then
    DATE_STR="$1"
else
    DATE_STR=$(date +%Y-%m-%d)
fi

DUMP_FILE="${DB_NAME}_${DATE_STR}.sql.gz"

# Проверка дали файлът съществува
if [[ ! -f "$DUMP_FILE" ]]; then
    echo "❌ Файлът $DUMP_FILE не съществува."
    exit 1
fi

echo "ℹ️ Възстановяване на база $DB_NAME от $DUMP_FILE..."

# 1. Изтриване на базата (ако съществува)
sudo mysql -e "DROP DATABASE IF EXISTS \`$DB_NAME\`;"

# 2. Създаване на нова база
sudo mysql -e "CREATE DATABASE \`$DB_NAME\` /*!40100 DEFAULT CHARACTER SET utf8mb3 */ /*!80016 DEFAULT ENCRYPTION='N' */;"

# 3. Импорт от gzip
gunzip < "$DUMP_FILE" | sudo mysql "$DB_NAME"

echo "✅ Базата $DB_NAME е възстановена успешно от $DUMP_FILE."
