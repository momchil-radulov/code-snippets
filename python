#libs
logzero, loguru, simple-settings, easygui, pysimplegui, fire, arrow, requests, beautifulsoup4, pudb
bottle, fastapi, hug, mkdocs, pypugjs
asyncio-nats-client, commandbus, pybuses
googlemaps, geopy, networkx
js2py, RapydScript, brython
https://github.com/psincraian/commandbus
https://github.com/Enforcer/pybuses
from functools import partial
from inspect import signature
from pydantic import BaseModel
python -m pip freeze > requirements.txt
python -m pip install -r requirements.txt
#db
pugsql, sqlalchemy, peewee, dataset, records, sqlobject
redis, pottery
https://jam-py.com/ , https://buildmedia.readthedocs.org/media/pdf/jam-py/latest/jam-py.pdf
TinyDB, MontyDB
sqlite3, sqlite_rx
#django
wheel, django, django-rest-framework, django-cors-headers, djoser, pillow, stripe
django-admin startproject mystore
python manage.py make migrations
#bash
bashplotlib, prettytable, fuzzywuzzy, tqdm, colorama, 

#work with virtual environment:
python3 -m venv folder_for_venv
. folder_for_venv/bin/activate
python -m pip install wheel
# add modules ...
python -m pip install requests
# save module dependencies
python freeze > requirements.txt
python -m pip install -r requirements.txt #[OR WITH WHEEL]# python -m pip wheel --wheel-dir=/wheels -r requirements.txt
:uninstall package:
pip uninstall requests
python freeze | xargs pip uninstall
OR
python -m pip install wheel
:if my-directory is the one that has setup.py:
python -m pip wheel . --wheel-dir ~/pylibs/wheel
:install component from wheel:
python -m pip install mypylib.whl --wheel-dir ~/pylibs/wheel
:install component for development and debuging:
:if my-directory is the one that has setup.py:
python -m pip install -e .

#create working environment
python3 -m venv mstore
. mstore/bin/activate
python -m pip install wheel
python -m pip install ipython
python -m pip install jupyter
:also install:
numpy, pandas, matplotlib
:run:
jupyter notebook

#check code quality:
python3 -m pip install pylint
python3 -m pip install mypy
python3 -m pip install black
pylint *py
pylint --output-format=colorized --reports=y *py | less -r
find . | grep py$ | xargs pylint
mypy *py
black --check *py
find . | grep py$ | xargs black

#get current datetime with timezone ('2020-06-18 19:02:32.463950+03:00'):
import arrow
arrow.now().datetime

# database
pip install sandman2
pip install psycopg2-binary # for postgresql
sandman2ctl -d sqlite:////home/user_name/projects/test/users.db
sandman2ctl 'postgresql://user_name:password@host_name.com/db_name'

# youtube
python -m pip install youtube-dl
cat tonus.txt | xargs -I% youtube-dl %
cat music.txt | xargs -I% youtube-dl -f m4a %

# selenium
sudo apt-get update
sudo apt-get install libsqlite3-dev chromium-driver google-chrome-stable
from selenium import webdriver
driver = webdriver.Chrome()
    OR with custom download => webdriver.Chrome('./chromedriver')
driver.get(url)
html = self.driver.page_source

# vim
https://www.tabnine.com/
pip3 install python-language-server
cd ~/.vim
git clone --depth 1 https://github.com/zxqfl/tabnine-vim
[.vimrc]
set rtp+=~/.vim/tabnine-vim
# in vim write TabNine::sem OR TabNine::version

#os
full_path = os.path.expanduser('~/file1.txt')
env_var = os.getenv('HOME','/home/mom')
 
