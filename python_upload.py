#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ –ø–æ FTP/FTPS –æ—Ç —Å–ø–∏—Å—ä–∫ (files2upload.txt).

–û–ø—Ü–∏–∏:
  --dry-run      : —Å–∞–º–æ –ø–æ–∫–∞–∑–≤–∞ –∫–∞–∫–≤–æ –ë–ò–• –∫–∞—á–∏–ª (–±–µ–∑ —Ä–µ–∞–ª–Ω–æ –∫–∞—á–≤–∞–Ω–µ)
  --force        : –∫–∞—á–≤–∞ –≤–∏–Ω–∞–≥–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ—Ç–æ
  --tls          : explicit FTPS (AUTH TLS –Ω–∞ –ø–æ—Ä—Ç 21) + –∑–∞—â–∏—Ç–µ–Ω data channel (PROT P)
  --insecure     : –ø—Ä–∏ --tls –∏–∑–∫–ª—é—á–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (—Å–∞–º–æ –∞–∫–æ –∑–Ω–∞–µ—à –∫–∞–∫–≤–æ –ø—Ä–∞–≤–∏—à)
  --passive      : –≤–∫–ª—é—á–≤–∞ PASV —Ä–µ–∂–∏–º

–°–ø–∏—Å—ä–∫—ä—Ç –ø–æ–¥–¥—ä—Ä–∂–∞ –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ —Ä–µ–¥:
  1) —Å–∞–º–æ –ª–æ–∫–∞–ª–µ–Ω –ø—ä—Ç (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–µ–Ω)
     –ø—Ä–∏–º–µ—Ä: reports/2025/10/sales.csv
     => —â–µ –∫–∞—á–∏ –ø–æ–¥ —Å—ä—â–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω –ø—ä—Ç –≤ --remote-dir

  2) –ª–æ–∫–∞–ª–µ–Ω –ø—ä—Ç -> –æ—Ç–¥–∞–ª–µ—á–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω –ø—ä—Ç
     –ø—Ä–∏–º–µ—Ä: out/report.pdf -> clientA/2025/report.pdf
     => —â–µ –∫–∞—á–∏ –∫–∞—Ç–æ --remote-dir/clientA/2025/report.pdf
"""

import argparse
import os
import ssl
import sys
from ftplib import FTP, FTP_TLS, error_perm
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Tuple, Optional


# === –¶–≤–µ—Ç–æ–≤–µ –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ===
class Color:
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    CYAN = "\033[96m"
    RESET = "\033[0m"


def colorize(text, color):
    """–í—Ä—ä—â–∞ —Ç–µ–∫—Å—Ç —Å —Ü–≤—è—Ç (–∞–∫–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—ä—Ç –ø–æ–¥–¥—ä—Ä–∂–∞ ANSI)."""
    if sys.stdout.isatty():
        return f"{color}{text}{Color.RESET}"
    return text


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ –ø–æ FTP/FTPS –æ—Ç —Å–ø–∏—Å—ä–∫.")
    p.add_argument("--server", default="1.8.1.8", help="FTP —Å—ä—Ä–≤—ä—Ä (host/IP)")
    p.add_argument("--port", type=int, default=21, help="FTP –ø–æ—Ä—Ç (21 –∑–∞ explicit TLS)")
    p.add_argument("--user", default="admin", help="FTP –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª")
    p.add_argument("--password", default="admin_pass", help="FTP –ø–∞—Ä–æ–ª–∞")
    p.add_argument("--remote-dir", default="", help="–û—Ç–¥–∞–ª–µ—á–µ–Ω–∞ –±–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (root –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ)")
    p.add_argument("--filelist", default="files2upload.txt", help="–§–∞–π–ª —Å—ä—Å —Å–ø–∏—Å—ä–∫ –∑–∞ –∫–∞—á–≤–∞–Ω–µ")
    p.add_argument("--dry-run", action="store_true", help="–ü—Ä–æ–±–µ–Ω —Ä–µ–∂–∏–º: –±–µ–∑ —Ä–µ–∞–ª–Ω–æ –∫–∞—á–≤–∞–Ω–µ")
    p.add_argument("--force", action="store_true", help="–ö–∞—á–≤–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ—Ç–æ")
    p.add_argument("--tls", action="store_true", help="–í–∫–ª—é—á–∏ explicit FTPS (AUTH TLS)")
    p.add_argument("--insecure", action="store_true",
                   help="(–° --tls) –ù–µ –≤–∞–ª–∏–¥–∏—Ä–∞–π TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (self-signed –∏ —Ç.–Ω.)")
    p.add_argument("--passive", action="store_true", help="–ò–∑—Ä–∏—á–Ω–æ –≤–∫–ª—é—á–∏ PASV —Ä–µ–∂–∏–º (–∞–∫–æ –µ –Ω—É–∂–Ω–æ)")
    p.add_argument("--timeout", type=int, default=30, help="Timeout –∑–∞ FTP –≤—Ä—ä–∑–∫–∞—Ç–∞ (—Å–µ–∫.)")
    return p.parse_args()


def read_list(path: str) -> List[str]:
    lines: List[str] = []
    with open(path, "r", encoding="utf-8") as f:
        for raw in f:
            s = raw.strip()
            if not s:
                continue
            if s.startswith("#!exit"):
                print("–ù–∞–º–µ—Ä–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '#!exit' ‚Üí –ø—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–º —á–µ—Ç–µ–Ω–µ—Ç–æ –Ω–∞ —Å–ø–∏—Å—ä–∫–∞.")
                break
            if s.startswith("#"):
                continue
            lines.append(s)
    return lines


def parse_mapping(entry: str) -> Tuple[str, Optional[str]]:
    """
    –í—Ä—ä—â–∞ (local_path_str, remote_rel_str|None).
    –ê–∫–æ —Ä–µ–¥—ä—Ç —Å—ä–¥—ä—Ä–∂–∞ " -> ", –ø—Ä–∏–µ–º–∞ —Å–µ –º–∞–ø–∏–Ω–≥: –ª–æ–∫–∞–ª–µ–Ω -> –æ—Ç–¥–∞–ª–µ—á–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω –ø—ä—Ç.
    –ò–Ω–∞—á–µ remote_rel –µ None –∏ —â–µ —Å–µ –ø–æ–ª–∑–≤–∞ –ª–æ–∫–∞–ª–Ω–∏—è—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω –ø—ä—Ç –∫–∞—Ç–æ –æ—Ç–¥–∞–ª–µ—á–µ–Ω.
    """
    arrow = " -> "
    if arrow in entry:
        left, right = entry.split(arrow, 1)
        return left.strip(), right.strip()
    return entry, None


def join_remote(base: str, rel: str) -> str:
    if not base:
        return rel.lstrip("/")
    return f"{base.rstrip('/')}/{rel.lstrip('/')}"


def ensure_remote_dirs(ftp: FTP, remote_path: str) -> None:
    """
    –°—ä–∑–¥–∞–≤–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–¥–∞–ª–µ—á–µ–Ω–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞ –¥–∞–¥–µ–Ω–∏—è remote_path (–∞–∫–æ –ª–∏–ø—Å–≤–∞—Ç).
    –ù–µ —Å–º–µ–Ω—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª–Ω–æ —Ä–∞–±–æ—Ç–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
    """
    # –†–∞–∑–¥–µ–ª—è–º–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ —Ñ–∞–π–ª
    remote_dir = remote_path.replace("\\", "/")
    if "/" in remote_dir:
        remote_dir = remote_dir.rsplit("/", 1)[0]
    else:
        return  # –Ω—è–º–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ

    if not remote_dir:
        return

    # –ó–∞–ø–æ–º–Ω—è–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ cwd
    try:
        cur = ftp.pwd()
    except Exception:
        cur = None

    # –•–æ–¥–∏–º –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏—Ç–µ
    parts = [p for p in remote_dir.split("/") if p and p != "."]
    for i, part in enumerate(parts):
        try:
            ftp.cwd(part)
        except error_perm:
            # –æ–ø–∏—Ç –∑–∞ MKD, –ø–æ—Å–ª–µ cwd
            try:
                ftp.mkd(part)
            except error_perm:
                # –≤—ä–∑–º–æ–∂–Ω–æ –µ –≤–µ—á–µ –¥–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –∏–ª–∏ –¥–∞ –Ω—è–º–∞ –ø—Ä–∞–≤–∞
                pass
            ftp.cwd(part)

    # –í—Ä—ä—â–∞–º–µ —Å–µ –æ–±—Ä–∞—Ç–Ω–æ
    if cur is not None:
        ftp.cwd(cur)


def remote_timestamp_utc(ftp: FTP, remote_path: str) -> float:
    """
    –í—Ä—ä—â–∞ –ø–æ—Å–ª–µ–¥–Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Ç–¥–∞–ª–µ—á–µ–Ω —Ñ–∞–π–ª –∫–∞—Ç–æ UNIX timestamp (UTC).
    –†–∞–±–æ—Ç–∏ –∏ –∫–æ–≥–∞—Ç–æ remote_path –µ –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (—á—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–µ–Ω cwd).
    –•–≤—ä—Ä–ª—è error_perm –∞–∫–æ —Ñ–∞–π–ª—ä—Ç –ª–∏–ø—Å–≤–∞ –∏–ª–∏ MDTM –Ω–µ –µ –Ω–∞–ª–∏—á–µ–Ω.
    """
    remote_path = remote_path.replace("\\", "/")
    dirpart, name = (remote_path.rsplit("/", 1) + [""])[:2] if "/" in remote_path else ("", remote_path)

    cur = ftp.pwd()
    try:
        if dirpart:
            ftp.cwd(dirpart)
        resp = ftp.sendcmd(f"MDTM {name}")
        parts = resp.split()
        if len(parts) < 2:
            raise error_perm(f"Bad MDTM response: {resp}")
        ts_str = parts[1]
        # RFC 3659 MDTM –≤ UTC: YYYYMMDDHHMMSS[.sss]
        ts_str = ts_str.split(".")[0]
        dt = datetime.strptime(ts_str, "%Y%m%d%H%M%S").replace(tzinfo=timezone.utc)
        return dt.timestamp()
    finally:
        try:
            ftp.cwd(cur)
        except Exception:
            pass


def ensure_cwd(ftp: FTP, remote_dir: str) -> None:
    if not remote_dir:
        return
    try:
        ftp.cwd(remote_dir)
    except error_perm:
        # –ê–∫–æ –±–∞–∑–æ–≤–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —è –Ω—è–º–∞ ‚Äì –æ–ø–∏—Ç –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –ø–æ –≤–µ—Ä–∏–≥–∞—Ç–∞.
        parts = [p for p in remote_dir.replace("\\", "/").split("/") if p]
        cur = ftp.pwd()
        try:
            for part in parts:
                try:
                    ftp.cwd(part)
                except error_perm:
                    try:
                        ftp.mkd(part)
                    except error_perm:
                        pass
                    ftp.cwd(part)
        finally:
            ftp.cwd(cur)


def connect_ftp(args) -> FTP:
    if args.tls:
        # Explicit FTPS (AUTH TLS)
        context = ssl.create_default_context()
        if args.insecure:
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
        ftp = FTP_TLS(context=context, timeout=args.timeout)
        ftp.connect(host=args.server, port=args.port, timeout=args.timeout)
        # –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ –∑–∞ UTF-8
        ftp.encoding = "utf-8"
        ftp.auth()         # upgrade control connection
        ftp.login(user=args.user, passwd=args.password)
        try:
            ftp.sendcmd("OPTS UTF8 ON")
        except Exception:
            pass
        ftp.prot_p()       # secure data channel
    else:
        ftp = FTP(timeout=args.timeout)
        ftp.connect(host=args.server, port=args.port, timeout=args.timeout)
        # –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ –∑–∞ UTF-8
        ftp.encoding = "utf-8"
        ftp.login(user=args.user, passwd=args.password)
        try:
            ftp.sendcmd("OPTS UTF8 ON")
        except Exception:
            pass

    if args.passive:
        ftp.set_pasv(True)
    return ftp


def main() -> None:
    args = parse_args()

    entries = read_list(args.filelist)
    if not entries:
        print("–°–ø–∏—Å—ä–∫—ä—Ç –∑–∞ –∫–∞—á–≤–∞–Ω–µ –µ –ø—Ä–∞–∑–µ–Ω. –ù–∏—â–æ –∑–∞ –ø—Ä–∞–≤–µ–Ω–µ.")
        return

    ftp = connect_ftp(args)
    # –∞–∫–æ –∏–º–∞ –±–∞–∑–æ–≤–∞ –æ—Ç–¥–∞–ª–µ—á–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ‚Äì —É–≤–µ—Ä–∏ —Å–µ, —á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    ensure_cwd(ftp, args.remote_dir)

    total = 0
    uploaded = 0
    skipped = 0
    failed = 0

    print()
    print("üì§  –ó–∞–ø–æ—á–≤–∞–º –∫–∞—á–≤–∞–Ω–µ—Ç–æ...")
    print("=" * 90)
    print(f"{'–§–ê–ô–õ':60} | {'–†–ê–ó–ú–ï–†':>10} | {'–î–ï–ô–°–¢–í–ò–ï'}")
    print("-" * 90)

    for entry in entries:
        total += 1
        local_str, remote_rel_override = parse_mapping(entry)

        # –õ–æ–∫–∞–ª–µ–Ω –ø—ä—Ç (–ø—Ä–∏–µ–º–∞–º–µ, —á–µ –µ –∫–∞–∫–≤–æ—Ç–æ –µ –∏–∑—Ä–µ–¥–µ–Ω–æ ‚Äì –º–æ–∂–µ –¥–∞ –µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω)
        local_path = Path(local_str).expanduser().resolve()

        if not local_path.exists() or not local_path.is_file():
            print(colorize(f"{local_str:60} | {'-':>10} | ‚ùå –ü—Ä–æ–ø—É—Å–Ω–∞—Ç (–Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ —Ñ–∞–π–ª)", Color.RED))
            failed += 1
            continue

        # –û—Ç–¥–∞–ª–µ—á–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω –ø—ä—Ç:
        # - –∞–∫–æ –∏–º–∞ –º–∞–ø–∏–Ω–≥ ‚Äû->‚Äú, –ø–æ–ª–∑–≤–∞–º–µ –¥—è—Å–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∞
        # - –∏–Ω–∞—á–µ –∑–∞–ø–∞–∑–≤–∞–º–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç —Å–ø–∏—Å—ä–∫–∞
        if remote_rel_override:
            remote_rel = remote_rel_override.replace("\\", "/")
        else:
            # –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–æ–≤–∞, –∫–æ–µ—Ç–æ –µ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —Å–ø–∏—Å—ä–∫–∞ (–±–µ–∑ –¥–∞ —Ä–µ–∂–µ–º –±–∞–∑–æ–≤–æ—Ç–æ –∏–º–µ)
            # –∞–∫–æ –ª–æ–∫–∞–ª–Ω–∏—è—Ç —Ä–µ–¥ –µ –¥–∞–¥–µ–Ω –∞–±—Å–æ–ª—é—Ç–µ–Ω, —â–µ –≤–∑–µ–º–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–æ —Å–ø—Ä—è–º–æ cwd
            # –∑–∞ –¥–∞ –∑–∞–ø–∞–∑–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞, –≤–∑–∏–º–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–∏—Å—ä–∫–∞:
            original_rel = local_str.replace("\\", "/")
            # –∞–∫–æ –µ –∞–±—Å–æ–ª—é—Ç–µ–Ω, –≥–æ —Å–≤–µ–∂–¥–∞–º–µ –¥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω —Å–ø—Ä—è–º–æ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if os.path.isabs(original_rel):
                try:
                    original_rel = os.path.relpath(original_rel, os.getcwd()).replace("\\", "/")
                except Exception:
                    # fallback: —Å–∞–º–æ –±–∞–∑–æ–≤–æ—Ç–æ –∏–º–µ
                    original_rel = Path(original_rel).name
            remote_rel = original_rel

        remote_path = join_remote(args.remote_dir, remote_rel)

        local_mtime = os.path.getmtime(local_path)
        size_bytes = os.path.getsize(local_path)

        # –†–µ—à–µ–Ω–∏–µ –¥–∞–ª–∏ –¥–∞ –∫–∞—á–∏–º
        if args.force:
            action = "UPLOAD (force)"
        else:
            try:
                r_mtime = remote_timestamp_utc(ftp, remote_path)
                action = "UPLOAD (local is newer)" if local_mtime > r_mtime else "SKIP (remote up-to-date/newer)"
            except error_perm:
                action = "UPLOAD (remote missing)"

        # –ü–æ–¥–æ–±—Ä–µ–Ω –∏–∑—Ö–æ–¥:
        if "UPLOAD" in action:
            print(colorize(f"{remote_rel:60} | {size_bytes:10,d} | ‚¨ÜÔ∏è  {action}", Color.CYAN))
            if not args.dry_run:
                try:
                    ensure_remote_dirs(ftp, remote_path)
                    with open(local_path, "rb") as fh:
                        # storbinary —Ä–∞–±–æ—Ç–∏ —Å –ø—ä–ª–µ–Ω (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–µ–Ω —Å–ø—Ä—è–º–æ cwd) –ø—ä—Ç
                        ftp.storbinary(f"STOR {remote_path}", fh)
                    uploaded += 1
                    print(colorize(f"{'':60} | {'':10} | ‚úÖ –ö–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", Color.GREEN))
                except Exception as e:
                    failed += 1
                    print(colorize(f"{'':60} | {'':10} | ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–∞—á–≤–∞–Ω–µ: {e}", Color.RED))
            else:
                print(colorize(f"{'':60} | {'':10} | üß™ Dry-run (–Ω—è–º–∞ –∫–∞—á–≤–∞–Ω–µ)", Color.YELLOW))
        else:
            print(colorize(f"{remote_rel:60} | {size_bytes:10,d} | ‚è© {action}", Color.YELLOW))
            skipped += 1

    ftp.quit()
    print("=" * 90)
    print()
    print("üìä  –†–µ–∑—é–º–µ:")
    print(f"  –û–±—â–æ —Ñ–∞–π–ª–æ–≤–µ:   {total}")
    print(f"  ‚úÖ –ö–∞—á–µ–Ω–∏:       {uploaded}")
    print(f"  ‚è© –ü—Ä–æ–ø—É—Å–Ω–∞—Ç–∏:   {skipped}")
    print(f"  ‚ùå –ì—Ä–µ—à–∫–∏:       {failed}")
    print()
    print("–ì–æ—Ç–æ–≤–æ.")


if __name__ == "__main__":
    main()
