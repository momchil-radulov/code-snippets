# links
https://github.com/k88hudson/git-flight-rules

# fix if broken
git remote prune origin

# remove commits from a branch
git reset --hard CommitId  # last commit to stay
git push -f

# basic workflow
git init
git add . OR git add <file_name> # add all files or a file to the git 
git rm <file_name> # remove file from git and from the project
git rm --cached <file_name> # remove file only from git (not physicaly)
git mv <file_name> <file_name_new> # rename git file
git status
git diff
git diff --staged
git diff -U5  # show 5 context lines OR git config --global diff.context 5
git diff -W   # show whole function as context lines for each change
git add path/file_name OR git commit -a
git reset HEAD -- path/to/file => remove file from staging area
OR
git clone <url_of_a_project> [path_for_project]
[.gitconfig]
1 [user]
2     email = momchil_radulov@yahoo.com
3     name = Momchil Radulov
4 [core]
5     editor = vim
6     autocrlf = input
7     excludesFile = /home/momchil/.gitignore
[.gitignore]
1 *.sess
[.git/info/exclude] file has the same format as any .gitignore

git checkout -b project_feature  # create a new branch
git show --oneline -s  # show last/current commit which is currently checked out in Git (-s => suppress diff output)
git show               # show last commit diff
git show [hash]        # show one commit diff

# remote
git remote -v
git remote show origin
git fetch --prune OR git remote prune origin  # remove tracking branches no longer on remote

# How to ignore new files
.gitignore # globally
.git/info/exclude # locally 

# Show
git log
git log -2 # show only two commits
git log --pretty=oneline # show one line for a commit
git log stat
git log --stat
git log --stat --graph
git log -p -- path/file
git log -p [--patch] # shows the difference (the patch output) introduced in each commit
git log -p <file_name> # show changes only for <file_name>
git blame <file_name> # show file row by row with who and when created this row
git log -S function_name # to find the last commit that changed the number of occurrences of that string

# show diff with
git diff section-3.1
git diff master:dir/file_name dir/file_name
git diff master  # diff branches, diff with master

# REMOVE!! changes
git reset --hard section-3.1
git reset --hard origin
git reset --hard
git clean -fxd  # remove untracked files !!!

git reset --soft origin  # keep the changes, remove commits

# branch
git checkout -b <branch_name> # create a new branch from current code
git commit -a # commit branch changes
git push # push branch changes
git checkout master # return to master/main branch
git pull # get last changes before merge
git diff $(git merge-base master <branch_name>)  # show diff made in <branch_name>
git log master..<branch_name>)  # show commits made in <branch_name>
git merge <branch_name> # merge branch to master
git push # push changes to the server

git branch # show branches
git fetch -p # get deleted branches from server/origin
git branch -d <branch_name> # delete a branch localy
git push origin --delete <branch_name> # delete a branch remotely
git checkout <branch_name> # get code of a branch
# branch changes
git diff $(git merge-base master branch_name)  # show diff made in branch_name
git log master..branchName
git log master..branchName -p
git log master..branchName --oneline
git log master..branchName --name-only --oneline
git log master..branchName --stat --oneline
git log master..branchName --pretty="format:" --name-only
git show master..branchName --pretty="format:" --name-only
git diff master..branchName
git diff master:dir/file_name dir/file_name
git log master..browsfarm-ci --pretty="" --name-only | sort | uniq
git log master..browsfarm-ci --pretty="" --name-only | sort | uniq | xargs -I% git --no-pager diff master:% % &> changes.log
git log --name-only --oneline  # show file names only, list files
## show branch changed files, list files
git diff --name-only main...
git diff --name-only master...
git diff --name-only branch_name $(git merge-base branch_name main) 

# tags
git tag # show tags
git tag -a v1.4 -m "my version 1.4" # git create annotated tag
git tag v1.4-lw # git create lightweight tag (basically the commit)
git log --pretty=oneline # show commits
git tag -a v1.2 9fceb02 # add tag from a commit
git push origin --tags # push tags to server
git show v1.2 # show info for tag "v1.2"
git checkout v2.0.0 # git checkout a tag version of git
git tag -d v1.4-lw # delete a tag

# temporary undo changes in a file and after that, return changes
git stash push project_name/appsettings.json  # for a individual file
git stash  # for all local changes
git stash pop
# show and clear stash stack
git stash list  
git stash clear
# revert last commit
git reset --soft HEAD~1
# undo last add command
git reset

# How to keep a branch synchronized/updated with master? #
виж https://stackoverflow.com/questions/16329776/how-to-keep-a-branch-synchronized-updated-with-master
git checkout master
git pull
git checkout mobiledevicesupport
git merge master
to keep mobiledevicesupport in sync with master

then when you're ready to put mobiledevicesupport into master, first merge in master like above, then ...
git checkout master
git merge mobiledevicesupport
git push origin master
# # #

# git: first rebase locally
git fetch origin                    # Updates origin/master
git rebase origin/master            # Rebases current branch onto origin/master
OR git pull --rebase origin master  # Upper two commands in one more new command
After that, hint:
  Resolve all conflicts manually, mark them as resolved with
  "git add/rm <conflicted_files>", then run "git rebase --continue".
  You can instead skip this commit: run "git rebase --skip".
  To abort and get back to the state before "git rebase", run "git rebase --abort".

# config
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
git config --global diff.context 5
OR localy for this repository only
git config user.name "John Doe"
git config user.email johndoe@example.com
git config diff.context 5

# alias
git config --global alias.ll 'log --oneline'  # create a alias
git ll                                        # use a alias
git config --global -l                        # list aliases

# razni
git log --format="%an" | sort -u        # show users
git log --format="%ae" | sort -u        # show emails
git log --format="%an - %ae" | sort -u  # users with emails
git log -p --author="author OR email"   # show code changes from a author
