# basic workflow
git init
git add . OR git add <file_name> # add all files or a file to the git 
git rm <file_name> # remove file from git and from the project
git rm --cached <file_name> # remove file only from git (not physicaly)
git mv <file_name> <file_name_new> # rename git file
git status
git diff
git diff --staged
git commit -a
OR
git clone <url_of_a_project> [path_for_project]
[.gitconfig]
1 [user]
2     email = momchil_radulov@yahoo.com
3     name = Momchil Radulov
4 [core]
5     editor = vim
6     autocrlf = input
7     excludesFile = /home/momchil/.gitignore
[.gitignore]
1 *.sess

git checkout -b project_feature # create a new branch

# remote
git remote -v
git remote show origin

# How to ignore new files
.gitignore # globally
.git/info/exclude # locally 

# Show
git log
git log -2 # show only two commits
git log --pretty=oneline # show one line for a commit
git log stat
git log -p [--patch] # shows the difference (the patch output) introduced in each commit
git log -p <file_name> # show changes only for <file_name>
git blame <file_name> # show file row by row with who and when created this row
git log -S function_name # to find the last commit that changed the number of occurrences of that string

# show diff with
git diff section-3.1
# REMOVE!! changes
git reset --hard section-3.1

# tags
git tag # show tags
git tag -a v1.4 -m "my version 1.4" # git create annotated tag
git tag v1.4-lw # git create lightweight tag (basically the commit)
git log --pretty=oneline # show commits
git tag -a v1.2 9fceb02 # add tag from a commit
git push origin --tags # push tags to server
git show v1.2 # show info for tag "v1.2"
git checkout v2.0.0 # git checkout a tag version of git
git checkout -b <branch_name> # create a new branch from current code
git tag -d v1.4-lw # delete a tag
git checkout master # return to master/main branch
git pull # get last changes before merge
git merge <branch_name> # merge branch to master
git push # push changes to the server

# branch
git checkout -b <branch_name> # create a new branch from current code
git commit -a # commit branch changes
git push # push branch changes
git checkout master # return to master/main branch
git pull # get last changes before merge
git merge <branch_name> # merge branch to master
git push # push changes to the server
git branch # show branches
git branch -d <branch_name> # delete a branch
git checkout <branch_name> # get code of a branch
# branch changes
git log master..branchName
git log master..branchName -p
git log master..branchName --oneline
git log master..branchName --name-only --oneline
git log master..branchName --stat --oneline
git log master..branchName --pretty="format:" --name-only
git show master..branchName --pretty="format:" --name-only
git diff master..branchName
git diff master:dir/file_name dir/file_name
git log master..browsfarm-ci --pretty="" --name-only | sort | uniq
$git log master..browsfarm-ci --pretty="" --name-only | sort | uniq | xargs -I% git --no-pager diff master:% % &> changes.log

# temporary undo changes in a file and after that, return changes
git stash push project_name/appsettings.json  
git stash pop
# show and clear stash stack
git stash list  
git stash clear
# revert last commit
git reset --soft HEAD~1
# undo last add command
git reset
