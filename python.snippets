# Return output (stdout and stderr) of executing cmd in a shell
import subprocess
cmd = 'ls /bin/ls'
cmd_exit_code, cmd_out = subprocess.getstatusoutput(cmd)
cmd_out_lines = cmd_out.splitlines()

# read and set attributes from a module
# виж https://github.com/charlsagente/python-settings/blob/master/python_settings/__init__.py#L51
import importlib
mod = importlib.import_module(self.SETTINGS_MODULE)
for setting in dir(mod):
  if setting.isupper():
    setting_value = getattr(mod, setting)
    setattr(self, setting, setting_value)

# DateTime
NY = pytz.timezone('America/New_York')
datetime_NY = datetime.now(NY)
print(datetime_NY.strftime("%d/%m/%Y, %H:%M:%S"))
# 02/12/2020, 18:56:01

last_week_day = now - timedelta(weeks=1)
print(last_week_day)
# 2020-11-25 23:45:03.248391

# How to list all existing loggers using python.logging module
# виж https://stackoverflow.com/questions/53249304/how-to-list-all-existing-loggers-using-python-logging-module
import logging
loggers = [logging.getLogger(name) for name in logging.root.manager.loggerDict]

class CustomHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        print('CustomHandler:', log_entry)

_logger = logging.getLogger('uvicorn.access')
fh = CustomHandler()
fh.setLevel(logging.INFO)
_logger.addHandler(fh)

logger.handlers => list of all handlers
logger = logging.getLogger()
for handler in logger.handlers:
    if handler.get_name() == 'console':
        handler.setLevel(logging.DEBUG)
