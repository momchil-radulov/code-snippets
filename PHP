# install

# install v.7
sudo apt update
sudo apt install software-properties-common
sudo add-apt-repository ppa:ondrej/php
sudo apt update
sudo apt install php7.0 php7.0-cli php7.0-fpm php7.0-mysql
# допълнителни полезни пакети
sudo apt install php7.0-mbstring php7.0-curl php7.0-json
php -v

# install v.5.6
sudo add-apt-repository ppa:ondrej/php
sudo apt update
sudo apt install php5.6
sudo apt install php5.6-mysql php5.6-xml php5.6-curl
php5.6 -v

# set short_open_tag On if needed
php7.0 --ini  # find path to ini file
sudo vim /etc/php/7.0/cli/php.ini
[/etc/php/7.0/cli/php.ini]
short_open_tag = Off => short_open_tag = On

# composer
sudo apt install composer
composer install  # where is composer.json of your project
# if concrete version is needed
which composer  # to find path to composer
composer self-update --2.2  # if old version is needed
php7.0 /usr/local/bin/composer install


[/etc/php/8.2/fpm/php.ini] или вашата конкретна версия
upload_max_filesize = 100M
post_max_size = 100M
# след това
sudo systemctl restart nginx.service
sudo systemctl restart php8.2-fpm.service

useful functions
htmlspecialchars
array_sum

# composer
https://getcomposer.org/download/
php5.6 composer.phar update
# в папката на файла composer.jsonutoload.php
composer install  # създава папка vendor с файл autoload.php

# включване на short_open_tag (<?) за стари сайтове
php --ini
phpinfo()
# за да разберем къде се намира файла php.ini и там променяме
short_open_tag = On

custom useful functions
arr_get
fmt_bgn

в даден клас да проверим:
if (method_exists($this, $methodName)) {
    echo "Методът '$methodName' съществува в класа.\n";
    $this->$methodName(); // Извикваме метода, ако съществува
}
$reflectionMethod = new ReflectionMethod($this, 'validate');
echo "Методът 'validate' има " . $reflectionMethod->getNumberOfParameters() . " аргумента.\n";
извън класът
if (method_exists($obj, 'exampleMethod')) {
    $obj->exampleMethod(); // Извикваме метода, ако съществува
}
$reflectionMethod = new ReflectionMethod('ClassName', 'methodName');

<?php

function debug_print($data, $exit = false, $logToFile = false)
{
    $backtrace = debug_backtrace();
    echo "function " . $backtrace[0]['function'] . ", file " . $backtrace[0]['file'] . ", line " . $backtrace[0]['line'] . "\n\n";

    echo '<pre style="background-color: #f9f9f9; padding: 10px; border: 1px solid #ddd; font-size: 14px;">';
    print_r($data);
    echo '</pre>';

    if($logToFile) {
        file_put_contents('debug_log.txt', print_r($data, True) . "\n", FILE_APPEND);
    }

    if($exit) {
        exit('debug_print exit');
    }
}

function print_stack_trace($is_args=false) {
    $stack = debug_backtrace();
    echo "<pre>";
    foreach ($stack as $frame) {
        if (isset($frame['file'])) {
            echo "Файл: " . $frame['file'] . "\n";
        }
        if (isset($frame['line'])) {
            echo "Ред: " . $frame['line'] . "\n";
        }
        echo "Функция: " . $frame['function'] . "\n";
        if ($is_args && isset($frame['args'])) {
            echo "Аргументи: ";
            print_r($frame['args']);
            echo "\n";
        }
        echo "\n";
    }
    echo "</pre>";
}

public function debug_trace() {
    $backtrace = debug_backtrace();
    
    echo "<pre>debug_trace:\n";
    foreach ($backtrace as $entry) {
        echo $entry['function'] . " < " . ($entry['file'] ?? 'N/A') . " : " . ($entry['line'] ?? 'N/A') . "\n";
    }
    echo "---------------------\n</pre>";
}

// helper functions
<?php

if ( ! function_exists('arr_get') )                                                                                                
{
    function arr_get($array, $key, $default = null) {
        return (array_key_exists($key, $array) && !empty($array[$key])) ? $array[$key] : $default;
    }
}

if ( ! function_exists('arr_init_key') )
{
    function arr_init_key(&$array, $key, $default) {
        if ( ! array_key_exists($key, $array)) {
            $array[$key] = $default;
        }
        return $array[$key];
    }
}

if ( ! function_exists('obj_get') )
{   
    function obj_get($object, $property, $default = null)
    {   
        if (property_exists($object, $property)) {
            return empty($object->$property) ? $default : $object->$property;
        }
        return $default;
    }
}

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Специално правило за /privacy-policy
    RewriteCond %{REQUEST_URI} ^/privacy-policy/?$
    RewriteRule ^privacy-policy/?$ /privacy-policy.txt [L]

</IfModule>
