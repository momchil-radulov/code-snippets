# sync with a usb / make a backup
rsync -av --size-only --progress /home/momchil/projects/my_project/ /media/momchil/DataTravel/my_project/

wget url/file.iso
sudo dd if=file.iso of=/dev/sda bs=4M status=progress oflag=sync

python -m venv venv
. venv/bin/activate
echo $VIRTUAL_ENV OR sys.prefix
deactivate

sudo apt install python3-pip
python3 -m pip install --upgrade pip
python3 -m pip install wheel
python3 -m pip install --user pipx

python3 -m pipx ensurepath
# /home/momchil/.local/bin is already in PATH.
[~/.bashrc]
export PATH="$PATH:~/.local/bin" # OR export PATH="$PATH:/home/momchil/.local/bin"
eval "$(register-python-argcomplete pipx)"

sudo apt update
sudo apt install bash-completion
pipx completions  # bash: eval "$(register-python-argcomplete pipx)"

pipx upgrade-all

pipx list
pipx install shell-functools
pipx install mitmproxy
pipx install bpytop
pipx install pylint
pipx install mypy
mypy --install-types scripts/opensearch_index.py
pipx install black  # /home/momchil/.local/bin/black
pipx install jc  # dig mom2000.com | jc --dig | jq -r '.[].answer[].data'
sudo apt install jq  # jq '.data[1].name' test.json OR cat test.json | jq '.data[1].name'

# cli ui
pip install cli-ui  # https://github.com/your-tools/python-cli-ui

# gui ui
sudo apt-get install python-guizero
pip install guizero
sudo pip3 install guizero[images]

# gui automation
pip install pyautogui
sudo apt-get install python3-tk python3-dev
import pyautogui
pyautogui.moveRel(0, 50, duration = 1)  # move down relativly
pyautogui.moveTo(100, 100, duration = 1)  # move absolutely
pyautogui.click(100, 100)  # click on this position
pyautogui.doubleClick()  # click on current position
pyautogui.typewrite("hello Geeks !")
pyautogui.hotkey("ctrlleft", "a")
time.sleep(2)

# copy to clipboard
cat file_name.txt | xclip -sel clip

# apt
apt update
apt upgrade
apt install package_name
apt remove package_name
apt autoremove  # remove unused packages
apt search package_name
apt list
apt show package_name  # info for a package_name

# bash
set -o vi    => cli vim mode
set -o emacs => return to default
curl host.com
mitmproxy --mode reverse:http://localhost:4000 -p 4001  # debug reverse proxy
(trap 'kill 0' SIGINT; sleep 4 & sleep 2 & wait)  # easily run and kill multiple process with ctrl-c
parallel -j 10 ./app.sh < args.txt
sh script.sh |& tee script.log  # send all (stdin and stderror) to screen and script.log
sh script.sh &> script.log  # send all (stdin and stderror) to script.log
bmon
tinyproxy
mitmproxy --mode reverse:http://localhost:5000 -p 4000  # listen 4000 send 5000
sshfs lightsail:/home/lightsail/documents /mnt/documents -o ro
ssh lightsail -N -L 1234:[remote.ip]:445  # by samba sharing
# redirect fastapi
ssh -R 8000:localhost:8000 hostname  # remote localhost:8000 to local localhost:8000
socat TCP-LISTEN:8000,bind=public_ip_address,reuseaddr,fork TCP:localhost:8000  # public_ip_address:8000 to localhost:8000
pkill socat
# password generate
openssl rand -base64 12

sudo apt install default-jre
sudo apt install default-jdk
sudo apt install libtika-java
pip install textract
## network, second ip address to loopback interface
sudo ip addr add 127.0.0.2/8 dev lo
sudo ip addr add 192.168.0.2/24 dev lo
ip addr show lo
## acl rights
sudo setfacl -m u:www-data:rwx /path/to/your/directory
sudo setfacl -R -m u:www-data:rwx /path/to/your/directory
getfacl /path/to/your/directory
# comp info
hostname, lsb_release -a, uname -a
lsblk, lscpu, lspci | grep VGA, sudo lshw
df -h, free -h, htop

# .bashrc
parse_git_branch() {
    git branch 2> /dev/null | grep '*' | sed -e 's/*//'
    # git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
# Променлива PS1 с текущия час, последната директория и Git клона
export PS1="\[\033[92m\]\$(date +%T) \[\033[93m\]\W \[\033[91m\]\$(parse_git_branch)\[\033[00m\]$ "
PS1="\[\e]0;\u@\h: \w\a\]\[\033[92m\]$(date +%T) \[\033[93m\]\W\[\033[00m\] $ "  # dont show branch in current session
# Променлива PS1 включваща само името на потребителя с Git клона и последната директория
export PS1='\[\e[0;34m\]\u:\[\e[0;32m\]($(parse_git_branch))\[\e[38;5;11m\]\W\[\e[0m\]\$ '
eval "$(zoxide init bash)"
export PATH="$PATH:~/.local/bin" # OR export PATH="$PATH:/home/momchil/.local/bin"
eval "$(register-python-argcomplete pipx)"
complete -f -d -W "runserver createsuperuser test shell dbshell \
migrate makemigrations loaddata dumpdata" ./manage.py
complete -f -d -W "notebook" jupyter

# z, cd replacement
sudo apt install zoxide
~/.bashrc
eval "$(zoxide init bash)"

# truncate a big log file
# ще намали размера на файла до 0 байта, без да го изтрива или променя неговите файлови дескриптори,
# което означава, че Mosquitto ще продължи да пише в същия файл
sudo truncate -s 0 /var/log/mosquitto/mosquitto.log

pip install webbrowser
import webbrowser
url = 'http://docs.python.org/'
webbrowser.open(url)  # with default web browser
# with chrome
# MacOS
chrome_path = 'open -a /Applications/Google\ Chrome.app %s'
# Windows
chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s'
# Linux
chrome_path = '/usr/bin/google-chrome %s'
webbrowser.get(chrome_path).open(url)

# upload files
[upload_files.sh] 
#!/bin/bash
sftp host_name << EOF
cd fastapi
put README.md
put fastapi_app.py
EOF

### sleep ###
[notes]
https://super-unix.com/ubuntu/ubuntu-how-to-keep-the-computer-awake-depending-on-activity/
sudo apt install xprintidle xdotool
[caf.py]
#!/usr/bin/env python3
import subprocess
import time
seconds = 120 # number of seconds to start preventing blank screen / suspend
while True:
    curr_idle = subprocess.check_output(["xprintidle"]).decode("utf-8").strip()
    if int(curr_idle) > seconds*1000:
        subprocess.call(["xdotool", "key", "Control_L"])
    time.sleep(10)
[insomnia.py]
#!/usr/bin/env python3
import os
import subprocess
script_dir = os.path.dirname(os.path.abspath(__file__))
try:
    pid = subprocess.check_output(["pgrep", "-f", "caf.py"]).decode("utf-8").strip()
    subprocess.Popen(["kill", pid])
    subprocess.Popen(["notify-send", "Computer doesn't stay awake..."])
except:
    subprocess.Popen(["/bin/bash", "-c", script_dir+"/"+"caf.py"])
    subprocess.Popen(["notify-send", "Computer stays awake..."])
### end sleep ###

// see https://creatomate.com/blog/how-to-change-the-volume-of-a-media-file-using-ffmpeg
// увеличаване на звука на медиен клип, loud audio
ffmpeg -i input.mp4 -af "volume=1.5" -c:v copy output.mp4

# convert pdf to image, конвертиране на pdf към картинка
sudo apt install imagemagick
sudo vim /etc/ImageMagick-6/policy.xml
<policy domain="coder" rights="none" pattern="PDF" />
=>
<policy domain="coder" rights="read|write" pattern="PDF" />
convert -density 300 file_name.pdf -quality 100 file_name.png

# logging
logging.basicConfig(filename='myapp.log', level=logging.DEBUG, format='%(asctime)s %(levelname)s:%(message)s')  # в началото в main файла
logging.getLogger().setLevel(logging.DEBUG)  # в кода някъде


# SCRIPTS

#***======= генерира рекурсивен списък на файловете в текущата директория =======***#
[generate_file_list.py]
import os
import argparse

def generate_file_list(local_dir, output_file):
    with open(output_file, 'w') as f:
        for root, _, files in os.walk(local_dir):
            for file in files:
                file_path = os.path.join(root, file)
                f.write(f"{file_path}\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Генериране на списък с файлове')
    parser.add_argument('-l', '--local-dir', type=str, default='.', help='Базова локална директория (по подразбиране: текущата директория)')
    parser.add_argument('-o', '--output-file', type=str, default='file_list.txt', help='Изходен файл за списъка с файлове (по подразбиране: file_list.txt)')
    
    args = parser.parse_args()
    local_dir = args.local_dir
    output_file = args.output_file

    generate_file_list(local_dir, output_file)


#***======= сваля файловете от текстовия списък =======***#
[client-name_download_sync.py]
import os
from ftplib import FTP
import hashlib
import argparse
import configparser

FTP_SECTION = "client-name"
FILE_EXT = [".php"]


def load_config(config_file):
    config = configparser.ConfigParser()
    config.read(config_file)
    return config


def connect_ftp(host, user, password):
    ftp = FTP(host)
    ftp.login(user, password)
    return ftp


def compute_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def get_remote_md5(ftp, remote_file_path):
    try:
        ftp.voidcmd("TYPE I")
        remote_hash = hashlib.md5()
        ftp.retrbinary(f"RETR {remote_file_path}", remote_hash.update)
        return remote_hash.hexdigest()
    except:
        return None


def download_file(ftp, remote_file_path, local_file_path, dry_run):
    local_dir_path = os.path.dirname(local_file_path)
    if not os.path.exists(local_dir_path):
        if dry_run:
            print(f"\n[DRY-RUN] Would create directory {local_dir_path}")
        else:
            os.makedirs(local_dir_path)
            print(f"\nCreated directory {local_dir_path}")
    if dry_run:
        print(f"\n[DRY-RUN] Would copy {local_file_path}")
    else:
        with open(local_file_path, "wb") as f:
            ftp.retrbinary(f"RETR {remote_file_path}", f.write)


def sync_files(ftp, file_list, remote_dir, dry_run):
    with open(file_list, "r") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            if line[0] == '#':
                continue
            _, ext = os.path.splitext(line)
            ext = ext.lower()
            if ext not in FILE_EXT:
                continue
            print(".", end="", flush=True)
            local_file_path = line.strip()
            relative_path = os.path.relpath(local_file_path, os.path.dirname(file_list))
            remote_file_path = os.path.join(remote_dir, relative_path)

            if os.path.isfile(local_file_path):
                local_md5 = compute_md5(local_file_path)
                remote_md5 = get_remote_md5(ftp, remote_file_path)
                if not remote_md5:
                    print(f"\nMissing remote file {remote_file_path}")

                if remote_md5 and local_md5 != remote_md5:
                    if dry_run:
                        print(f"\n[DRY-RUN] Would copy {local_file_path}")
                    else:
                        download_file(ftp, remote_file_path, local_file_path, dry_run)
                        print(f"\nCopied {local_file_path}")
            else:
                print(f"\nMissing local file {local_file_path}")
        print("")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Синхронизация на файлове през FTP")
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Симулиране на синхронизацията без реално копиране на файлове",
    )
    parser.add_argument(
        "--file-list",
        type=str,
        default="file_list.txt",
        help="Файл със списъка на файловете за синхронизация (по подразбиране: file_list.txt)",
    )
    parser.add_argument(
        "-c", "--config",
        type=str,
        default="config.ini",
        help="Път до конфигурационния файл (по подразбиране: config.ini)",
    )

    args = parser.parse_args()
    dry_run = args.dry_run
    file_list = args.file_list
    config_file = args.config

    config = load_config(config_file)
    FTP_HOST = config[FTP_SECTION]["host"]
    FTP_USER = config[FTP_SECTION]["username"]
    FTP_PASS = config[FTP_SECTION]["password"]
    remote_dir = config[FTP_SECTION]["remote_dir"]

    ftp = connect_ftp(FTP_HOST, FTP_USER, FTP_PASS)
    sync_files(ftp, file_list, remote_dir, dry_run)
    ftp.quit()



#***======= качва файловете от текстовия списък =======***#
[client-name_upload_sync.py]
import os
from ftplib import FTP
import hashlib
import argparse
import configparser

FTP_SECTION = "client-name"
FILE_EXT = [".php"]


def load_config(config_file):
    config = configparser.ConfigParser()
    config.read(config_file)
    return config


def connect_ftp(host, user, password):
    ftp = FTP(host)
    ftp.login(user, password)
    return ftp


def compute_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def get_remote_md5(ftp, remote_file_path):
    try:
        ftp.voidcmd("TYPE I")
        remote_hash = hashlib.md5()
        ftp.retrbinary(f"RETR {remote_file_path}", remote_hash.update)
        return remote_hash.hexdigest()
    except:
        return None


def upload_file(ftp, local_file_path, remote_file_path, dry_run):
    remote_dir_path = os.path.dirname(remote_file_path)
    try:
        ftp.cwd(remote_dir_path)
    except:
        if dry_run:
            print(f"\n[DRY-RUN] Would create directory {remote_dir_path}")
        else:
            create_remote_dirs(ftp, remote_dir_path)
            print(f"\nCreated remote directory {remote_dir_path}")

    if dry_run:
        print(f"\n[DRY-RUN] Would upload {local_file_path} to {remote_file_path}")
    else:
        with open(local_file_path, "rb") as f:
            ftp.storbinary(f"STOR {remote_file_path}", f)
            print(f"\nUploaded {local_file_path} to {remote_file_path}")


def create_remote_dirs(ftp, remote_dir_path):
    dirs = remote_dir_path.split("/")
    path = ""
    for dir in dirs:
        path = f"{path}/{dir}" if path else dir
        try:
            ftp.cwd(path)
        except:
            ftp.mkd(path)
            ftp.cwd(path)


def sync_files(ftp, file_list, remote_dir, dry_run):
    with open(file_list, "r") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            if line[0] == '#':
                continue
            _, ext = os.path.splitext(line)
            ext = ext.lower()
            if ext not in FILE_EXT:
                continue
            print(".", end="", flush=True)
            local_file_path = line.strip()
            relative_path = os.path.relpath(local_file_path, os.path.dirname(file_list))
            remote_file_path = os.path.join(remote_dir, relative_path)

            if os.path.isfile(local_file_path):
                local_md5 = compute_md5(local_file_path)
                remote_md5 = get_remote_md5(ftp, remote_file_path)
                if not remote_md5:
                    print(f"\nMissing remote file {remote_file_path}")

                if remote_md5 != local_md5:
                    upload_file(ftp, local_file_path, remote_file_path, dry_run)
                else:
                    print(f"\nNo changes for {local_file_path}")
            else:
                print(f"\nMissing local file {local_file_path}")
        print("")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Синхронизация на файлове през FTP")
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Симулиране на синхронизацията без реално копиране на файлове",
    )
    parser.add_argument(
        "--file-list",
        type=str,
        default="file_list.txt",
        help="Файл със списъка на файловете за синхронизация (по подразбиране: file_list.txt)",
    )
    parser.add_argument(
        "-c", "--config",
        type=str,
        default="config.ini",
        help="Път до конфигурационния файл (по подразбиране: config.ini)",
    )

    args = parser.parse_args()
    dry_run = args.dry_run
    file_list = args.file_list
    config_file = args.config

    config = load_config(config_file)
    FTP_HOST = config[FTP_SECTION]["host"]
    FTP_USER = config[FTP_SECTION]["username"]
    FTP_PASS = config[FTP_SECTION]["password"]
    remote_dir = config[FTP_SECTION]["remote_dir"]

    ftp = connect_ftp(FTP_HOST, FTP_USER, FTP_PASS)
    sync_files(ftp, file_list, remote_dir, dry_run)
    ftp.quit()
