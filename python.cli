# sync with a usb / make a backup
rsync -av --size-only --progress /home/momchil/projects/my_project/ /media/momchil/DataTravel/my_project/

sudo apt install python3-pip
python3 -m pip install --upgrade pip
python3 -m pip install wheel
python3 -m pip install --user pipx

python3 -m pipx ensurepath
# /home/momchil/.local/bin is already in PATH.
[~/.bashrc]
export PATH="$PATH:/home/momchil/.local/bin"
eval "$(register-python-argcomplete pipx)"

sudo apt update
sudo apt install bash-completion
pipx completions  # bash: eval "$(register-python-argcomplete pipx)"

pipx upgrade-all

pipx list
pipx install shell-functools
pipx install mitmproxy
pipx install bpytop
pipx install pylint
pipx install mypy
mypy --install-types scripts/opensearch_index.py
pipx install black  # /home/momchil/.local/bin/black
pipx install jc  # dig mom2000.com | jc --dig | jq -r '.[].answer[].data'
sudo apt install jq  # jq '.data[1].name' test.json OR cat test.json | jq '.data[1].name'

# cli ui
pip install cli-ui  # https://github.com/your-tools/python-cli-ui

# .bashrc
parse_git_branch() {
    git branch 2> /dev/null | grep '*' | sed -e 's/*//'
    # git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\[\033[92m\]\$(date +%T) \[\033[93m\]\W\[\033[91m\]\$(parse_git_branch)\[\033[00m\]$ "

# gui ui
sudo apt-get install python-guizero
pip install guizero
sudo pip3 install guizero[images]

# gui automation
pip install pyautogui
sudo apt-get install python3-tk python3-dev
import pyautogui
pyautogui.moveRel(0, 50, duration = 1)  # move down relativly
pyautogui.moveTo(100, 100, duration = 1)  # move absolutely
pyautogui.click(100, 100)  # click on this position
pyautogui.doubleClick()  # click on current position
pyautogui.typewrite("hello Geeks !")
pyautogui.hotkey("ctrlleft", "a")
time.sleep(2)

# apt
apt update
apt upgrade
apt install package_name
apt remove package_name
apt autoremove  # remove unused packages
apt search package_name
apt list
apt show package_name  # info for a package_name

# bash
set -o vi    => cli vim mode
set -o emacs => return to default
curl host.com
mitmproxy --mode reverse:http://localhost:4000 -p 4001  # debug reverse proxy
(trap 'kill 0' SIGINT; sleep 4 & sleep 2 & wait)  # easily run and kill multiple process with ctrl-c
parallel -j 10 ./app.sh < args.txt
sh script.sh |& tee script.log  # send all (stdin and stderror) to screen and script.log
sh script.sh &> script.log  # send all (stdin and stderror) to script.log
bmon
tinyproxy
mitmproxy --mode reverse:http://localhost:5000 -p 4000  # listen 4000 send 5000
sshfs lightsail:/home/lightsail/documents /mnt/documents -o ro
ssh lightsail -N -L 1234:[remote.ip]:445  # by samba sharing
sudo apt install default-jre
sudo apt install default-jdk
sudo apt install libtika-java
pip install textract
## network, second ip address to loopback interface
sudo ip addr add 127.0.0.2/8 dev lo
sudo ip addr add 192.168.0.2/24 dev lo
ip addr show lo
## acl rights
sudo setfacl -m u:www-data:rwx /path/to/your/directory
sudo setfacl -R -m u:www-data:rwx /path/to/your/directory
getfacl /path/to/your/directory

pip install webbrowser
import webbrowser
url = 'http://docs.python.org/'
webbrowser.open(url)  # with default web browser
# with chrome
# MacOS
chrome_path = 'open -a /Applications/Google\ Chrome.app %s'
# Windows
chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s'
# Linux
chrome_path = '/usr/bin/google-chrome %s'
webbrowser.get(chrome_path).open(url)

### sleep ###
[notes]
https://super-unix.com/ubuntu/ubuntu-how-to-keep-the-computer-awake-depending-on-activity/
sudo apt install xprintidle xdotool
[caf.py]
#!/usr/bin/env python3
import subprocess
import time
seconds = 120 # number of seconds to start preventing blank screen / suspend
while True:
    curr_idle = subprocess.check_output(["xprintidle"]).decode("utf-8").strip()
    if int(curr_idle) > seconds*1000:
        subprocess.call(["xdotool", "key", "Control_L"])
    time.sleep(10)
[insomnia.py]
#!/usr/bin/env python3
import os
import subprocess
script_dir = os.path.dirname(os.path.abspath(__file__))
try:
    pid = subprocess.check_output(["pgrep", "-f", "caf.py"]).decode("utf-8").strip()
    subprocess.Popen(["kill", pid])
    subprocess.Popen(["notify-send", "Computer doesn't stay awake..."])
except:
    subprocess.Popen(["/bin/bash", "-c", script_dir+"/"+"caf.py"])
    subprocess.Popen(["notify-send", "Computer stays awake..."])
### end sleep ###
