# Мисли
"В компютърните науки има само две трудни неща: инвалидиране на кеша и именуване на нещата."
-- Фил Карлтон
"There are only two hard things in Computer Science: cache invalidation and naming things."
-- Phil Karlton
"Всяко нещо има четири характеристики: материя, форма, предназначение и производител."
-- Vilna Gaon

# Хумор
"There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors."
-- Leon Bambrick
"В компютърните науки има 2 трудни проблема: инвалидиране на кеша, именуване на нещата и грешки с изместване с 1."
-- Леон Бамбрик
https://codecourse.sourceforge.net/materials/How-To-Write-Unmaintainable-Code.html
-- How To Write Unmaintainable Code

# Принципи
1.  ! Data-Oriented programming and TDD (Test driven development) !
2.  Данните са във формат Dictionary, ключовете (освен ако не е много наложително) са текстови "key.subkey..."
    Функциите се викат с три dictionary параметъра, които са опционални/незадължителни: params, settings, event
3.  Всяка причина на промяна се капсулира в ! Event ! и се пропагандира по целия стек на промяна
4.  Workflow е:
        събитие от най високо ниво (генерирано от UI, cron, web hook)
        вика се метод от първичния Service layer
            който оркестрира викания код
            подава event, settings, params от най високо ниво
            генерира вторични events във опашките
            записва генерираните данни във DAL
        викат се глобални методи от глобални модули (BUSINESS, DAL, ...)
        викат се локални методи от конкретните локални модули
5.  Ниво на абстракция за данните, модули: "Data Manipulation Functions" и "DAL"
        Има функции за работа с типовете данни, които абстрахират работата с данните на конкретния програмен език и
        са разбираеми и интуитивни за четене от човек, например: extract_column(items, 'column_name')
        която може да инкапсулира например => php.array_column($items, 'column_name'), python.[item.get('column_name') for item in items]
6.   Ниво на абстракция за модулите: глобални и локални модули, Two function abstraction
    =>  event = {"id": 123, "type": "user_action"}
        settings = {"db_file": "/var/db/firm.db", "db_type": "sqlite3"}
        params = {"query_type": "insert", "query_table": "users", "query_fields": {"name": "John Doe", "email": "john@example.com"}}
    =>  db_service.handle_database_request(event, settings, params)
                   if settings['db_type'] == 'sqlite3':
                       db = load_db_sqlite3
                   ... db.insert()
    =>  всеки локален db модул има метод имплементирани select, insert, update, delete ..., които се викат от глобалните модули
7.  Първо се описват изискиванията на потребителя във Потребителски истории/User stories.
    След това необходимата функционалност се описва със псевдокод.
    Псевдокода става на коментар към сигнатури на функции.
    Пишат се тестовете за тези функции/TDD.
    Имплементират се функциите, като се ползват Application API функциите,
    т.е. използваме базовите модули на приложението и неговите базови функции, вкл DAL.
8.  Защитено програмиране, т.е. функциите валидират и входа и изхода си
    Получават три речника като параметри: event, settings, params
    Връщат един речник като резултат: result в който има параметри:
        success задължителен, дали функцията е завършила нормално
        message съобщение за четене от човек, задължително за функции от високо ниво
    Параметрите и резултата са документирани (задължителни, опционални, default стойности)
    Входа и изхода на стойностите използвани от функциите от високо ниво е текст
        с цел да има по добра съвместимост и защита от грешна итерпретация на стойностите
9.  Да ! не се подтискат грешките/ранните изходи !, а да се генерира подходящо съобщение
        и евентуално да се записва във error log при системен проблем
10. Функцията трябва да може да се извика със параметър
        -- dry-run при което функцията се стартира без външни ефекти (without DAL, emails ...)
        -- mockup при което игнорира входните си параметри и генерира примерен изход, който може да бъде overloaded with mockup_value
        -- help при което генерира документация за самата функция, входни параметри и резултат
        -- verbose при което генерира допълнителни полета в резултата, които дават допълнителни детайли и help
        -- при успех функцията записва лог във ! промените по документа !
        -- при неуспех функцията записва лог във ! error log !
11. Данните, Настройките се вземат със функция/getter (една глобална и една локална [виж предходната точка])
    Файлът с настройките има префикс за environment
    Опционално url в настройките за зареждане на мрежови настройки с опция ако не може да го зареди дали да спре изпълнението
    Настройка се презаписва със bash/env variable със специфичен префикс за приложението
12. DAL който
        генерира SQL
        таблиците са със префикс за отделните модули, напр. trz_payments_sum
        колоните са с уникално име за цялата база данни
        име колона първичен ключ и име колона вторичен ключ: завършват на "_id"
        вътрешната имплементация на съхраняване се скрива във логически групирани:
            views със съответните им DAL модули, които скриват сеченията на таблиците и CRUD операциите по тях
13. Данните имат статус (изтрити, активни, версия).
Всяка таблица си има копие с име-на-таблицата-history в което има по един ред за всяка промяна + event_id, и когато се записва връзка към даден ред, се записва и връзката към актуалния ред в history таблицата към момента на записа.
14. EventSource => id, created_at, type_id, period_id, timestamp, data (field:old_value:value,), entity_id, by_eventsource_id
    Entity      => id, created_at, type_id, period_id, timestamp, data,
    ! Кодът записва всяка една промяна по стейта в детайлен вид като eventsource предизвикан от главния by_eventsource_id предизвикан от UI/crontab !
15. Правата се реализират RBAC(Role Based Access Control) with ABAC(Attribute Based Access Control):
    Subject(e.g. User), Action, Resource, Attributes
  ! Лека имплементация:
        правата са: "ресурс:право", пр. "поръчка:създаване", минимум права: "създаване/преглед/редакция/изтриване" т.нар. CRUD
        ролите са: съвкупност от права
        потребителите: имат няколко роли, които им създават съвкупност от права
        в кода проверката е: (примерно) тук има ли право "продукт:създаване" в правата на текущия потребител,
                             проверката е с максимална защита: например ако има нужда само собственика да вижда
                                                               и съответно има право дали да се вижда всичко
  ! Пълна имплементация:
    "resource:action:function" ...
    Role => key "resource:action" value function (subject, resource) {check some attributes and return result}
    Attributes of ALL:      tablename_id, type_id, event_id,
                            is_deleted, is_active, is_locked (забранен за промяна, освен за root)
                            created_user_id, created_at, updated_user_id, updated_at, deleted_user_id, deleted_at
          of Resource:      user_ids (собствениците на ресурса с пълни права, освен ако не е заключен),
                         !! role_ids !! (както в linux, ролята/групата може да има rwx права/маска), 
                            shared_role_ids, forbidden_role_ids
      of User/Subject:   !! role_ids !! => right_ids (type_id.action_id) 
             of Right:      name: "resource:action:function", right_type_id, right_action_id, function
                        !!! function ( user_id, resource_id ) { return true or false } to check is_right !!!
              of Role:      name: "Администратор", role_right_ids (type_id.action_id:function to check)
                            type_id.action_id:function           => to check with function
                            type_id.action_id:function_false     => no right
                            type_id.action_id:function_forbidden => forbidden right, return no и спира процеса по проверка от други роли
                            type_id.action_id:function_yes       => yes right
                                                                 => няма запис за даден type_id/resource => no right
            of Action:      is_create, is_view, is_update, is_delete, is_active, is_lock
16. Всеки запис/обект в базата си има собственик, роля/група, както и права за собственик, група и други: rwxrwxrwx - както в Linux
17. Превода на програмата е през функция, напр. l('текст', 'незадължителен уточняващ текст за по специализиран превод')
18. Плъгин система за извикване/модифициране на външен код/данни
19. Системата трябва да има стабилни настройки по подразбиране,
    включително минимални/максимални стойности, които й позволяват да работи стабилно

# links
https://www.youtube.com/watch?v=8j29aAbtYWo => Web architecture
https://www.youtube.com/watch?v=uLp-zgset00 => CI/CD
https://www.youtube.com/watch?v=5GG-VUvruzE => Rights
https://www.youtube.com/watch?v=QIfgGycBGfg => python
https://www.youtube.com/watch?v=7OhBgkFtwFU => fasthtml
https://github.com/pyeventsourcing/eventsourcing => eventsourcing

# python
https://sanic.dev/en/
https://fastapi.tiangolo.com/
https://fastht.ml/

# css
https://bulma.io/
https://watercss.kognise.dev/
https://shakrmedia.github.io/petal/

# js
https://htmx.org/
https://alpinejs.dev/
https://zeptojs.com/

# git
branch fix/2024-09-29-some-fix
branch feature/2024-09-29-some-feature
branch dev, test server
branch main, production server
