# Принципи
1.  Data-Oriented programming
2.  Данните са във формат Dictionary
3.  Всяка причина на промяна се капсулира в Event и се пропагандира по целия стек на промяна
4.  Първо се описва функционалността със псевдокод и
        после всеки ред от псевдокода се прави на функция със подобно име
5.  Функционалността трябва да може да се извика със параметър
        --dry-run при което функцията се стартира без външни ефекти (without DAL, emails ...)
6.  Ниво на абстракция Data Manipulation Functions
7.  Two function abstraction, една глобална и една локална за модула
8.  Данните, Настройките се вземат със функция/getter (една глобална и една локална [виж т.2])
9.  DAL който
        генерира SQL
        таблиците са със префикс
        колоните са с уникално име за цялата база данни
        колона ключ (първичен или вторичен) може името да се повтаря
10. Данните имат статус (изтрити, активни, версия)
11. Защитено програмиране, т.е. функциите валидират и входа и изхода си
12. Правата се реализират: Subject(e.g.user), Action, Resource, Attributes
    "resource:action" ...
    Role => key "resource:action" value function (subject, resource) {check some attributes and return result}
    Attributes of ALL:      tablename_id, type_id, event_id,
                            is_deleted, is_active, is_locked (забранен за промяна, освен за root)
                            created_user_id, created_at, updated_user_id, updated_at, deleted_user_id, deleted_at
    Attributes of resource: owner_user_id, owner_role_id, owner_role_action_ids (както в linux, групата може да има rwx маска), 
                            shared_role_ids, forbidden_role_ids
    Attributes of subject:  role_ids => right_ids (type_id.action_id) 
    Attributes of right:    name: "resource:action", right_type_id, right_action_id,
                            !!! function_name(user_id, resource_id) (return true or false) to check is_right !!!
    Attributes of role:     name: "Администратор", role_right_ids (type_id.action_id)

# links
https://www.youtube.com/watch?v=8j29aAbtYWo => Web architecture
https://www.youtube.com/watch?v=uLp-zgset00 => CI/CD
https://www.youtube.com/watch?v=5GG-VUvruzE => Rights

# python
https://fastht.ml/

# css
https://bulma.io/
https://watercss.kognise.dev/
https://shakrmedia.github.io/petal/

# js
https://htmx.org/
https://alpinejs.dev/
https://zeptojs.com/

# git
branch fix/2024-09-29-some-fix
branch feature/2024-09-29-some-feature
branch dev, test server
branch main, production server
