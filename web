# Принципи
1.  Data-Oriented programming
2.  Данните са във формат Dictionary
3.  Всяка причина на промяна се капсулира в Event и се пропагандира по целия стек на промяна
4.  Първо се описва функционалността със псевдокод и
        после всеки ред от псевдокода се прави на функция със подобно име
5.  Функционалността трябва да може да се извика със параметър
        --dry-run при което функцията се стартира без външни ефекти (without DAL, emails ...)
6.  Ниво на абстракция Data Manipulation Functions
7.  Two function abstraction, една глобална и една локална за модула
8.  Данните, Настройките се вземат със функция/getter (една глобална и една локална [виж т.2])
9.  DAL който
        генерира SQL
        таблиците са със префикс
        колоните са с уникално име за цялата база данни
        колона ключ (първичен или вторичен) може името да се повтаря
10. Данните имат статус (изтрити, активни, версия)
11. Защитено програмиране, т.е. функциите валидират и входа и изхода си
12. Правата се реализират RBAC(Role Based Access Control) with ABAC(Attribute Based Access Control):
    Subject(e.g. User), Action, Resource, Attributes
  ! Лека имплементация:
        правата са: "ресурс:право", пр. "поръчка:създаване"
        ролите са: съвкупност от права
        потребителите: имат няколко роли, които им създават съвкупност от права
        в кода проверката е: (примерно) тук има ли право "продукт:създаване" в правата на текущия потребител
  ! Пълна имплементация:
    "resource:action:function" ...
    Role => key "resource:action" value function (subject, resource) {check some attributes and return result}
    Attributes of ALL:      tablename_id, type_id, event_id,
                            is_deleted, is_active, is_locked (забранен за промяна, освен за root)
                            created_user_id, created_at, updated_user_id, updated_at, deleted_user_id, deleted_at
          of Resource:      user_ids (собствениците на ресурса с пълни права, освен ако не е заключен),
                         !! role_ids !! (както в linux, ролята/групата може да има rwx права/маска), 
                            shared_role_ids, forbidden_role_ids
      of User/Subject:   !! role_ids !! => right_ids (type_id.action_id) 
             of Right:      name: "resource:action:function", right_type_id, right_action_id, function
                        !!! function ( user_id, resource_id ) { return true or false } to check is_right !!!
              of Role:      name: "Администратор", role_right_ids (type_id.action_id:function to check)
                            type_id.action_id:function           => to check with function
                            type_id.action_id:function_false     => no right
                            type_id.action_id:function_forbidden => forbidden right, return no и спира процеса по проверка от други роли
                            type_id.action_id:function_yes       => yes right
                                                                 => няма запис за даден type_id/resource => no right
            of Action:      is_create, is_view, is_update, is_delete, is_active, is_lock

# links
https://www.youtube.com/watch?v=8j29aAbtYWo => Web architecture
https://www.youtube.com/watch?v=uLp-zgset00 => CI/CD
https://www.youtube.com/watch?v=5GG-VUvruzE => Rights
https://www.youtube.com/watch?v=QIfgGycBGfg => python

# python
https://fastht.ml/

# css
https://bulma.io/
https://watercss.kognise.dev/
https://shakrmedia.github.io/petal/

# js
https://htmx.org/
https://alpinejs.dev/
https://zeptojs.com/

# git
branch fix/2024-09-29-some-fix
branch feature/2024-09-29-some-feature
branch dev, test server
branch main, production server
