sudo apt install mosquitto mosquitto-clients  # !!! overload /etc/mosquitto/mosquitto.conf
sudo systemctl status mosquitto
sudo systemctl enable mosquitto
sudo systemctl restart mosquitto
sudo systemctl start mosquitto
sudo systemctl stop mosquitto

sudo mosquitto -c /etc/mosquitto/mosquitto.conf

# truncate a big log file
# ще намали размера на файла до 0 байта, без да го изтрива или променя неговите файлови дескриптори,
# което означава, че Mosquitto ще продължи да пише в същия файл
sudo truncate -s 0 /var/log/mosquitto/mosquitto.log
ls -lh /var/log/mosquitto/mosquitto.log

file: /etc/mosquitto/mosquitto.conf
allow_anonymous false
password_file /etc/mosquitto/passwd
acl_file /etc/mosquitto/acl
file: acl
user mosquitto_user
topic access_to_topic

# websockets
port 1883
#log_type all
listener 9001
#log_type all
protocol websockets
socket_domain ipv4
allow_anonymous true

$mosquitto_passwd -b /etc/mosquitto/mosquitto_passwd user password
$service mosquitto reload

[/etc/mosquitto/mosquitto.acl]
user root
topic readwrite #
# anonymouse users and all other not matched upper !!!
pattern readwrite public/#


.w !bash
$mosquitto_pub -h hostname -p 1883 -t topic_name -m 'message hello world' -u user_name -P password
$mosquitto_sub -h hostname -p 1883 -t topic_name -u user_name -P password
# with ssl
openssl s_client -connect host.com:8883 -showcerts => copy Server certificate to ca.crt

mosquitto_sub -h host.com -p 8883 -t topic/topic -u user_name -P password --cafile ca.crt --insecure
mosquitto_sub -v -h localhost -p 1883 -t 'topic/sub_topic/#' 2>&1 | grep --line-buffered -v '"type":"debug"' 2>&1 | tee -a mqtt_debug.log

see https://stackoverflow.com/questions/52283671/mqtt-publish-multiple-topics-with-mosquitto-pub-from-stdin
    https://hub.docker.com/_/eclipse-mosquitto
    
$ docker run -it -p 1883:1883 eclipse-mosquitto

$ gettemp --format "temp_%n=%v C" --repeat 3 | mosquitto_pub --stdin-line --topic /sensors/temps/outside
$ mosquitto_sub -t /sensors/temps/# -F "UPDATE Temperatures(%t, %p)" | mysqlcli
$ tail temperature.pool | mosquitto_pub -l --topic /sensors/temps/outside

# on different topics
$ gettemp --format "temp_%n=%v C" | publish.py

[publish.py]
import paho.mqtt.client as mqtt
import time
import sys
import re


def main():
  client = mqtt.Client()
  client.connect("localhost", 1883 , 60)
  client.loop_start()

  for line in sys.stdin:
    m = re.match('(.*)=(.*)', line)
    if m:
      client.publish(m.group(1), payload=m.group(2))

  time.sleep(2)
  client.loop_stop()

if __name__ == "__main__":
    main()
    
## Mosquitto config example
# Основни настройки
autosave_interval 900  # Запазване на всеки 15 минути вместо 30
persistence true
persistence_file mosquitto.db
persistence_location /var/lib/mosquitto/  # По-подходящо място от /tmp/

# Логиране
log_dest file /var/log/mosquitto/mosquitto.log
log_type warning
log_type error
log_type notice  # Добавено за важни събития
log_timestamp true
log_facility local5  # За интеграция с syslog

# Мрежови настройки
max_connections 1000  # Лимит на връзките
connection_messages true
listener 1883 127.0.0.1  # Нешифрован порт

# TLS настройки
listener 8883 0.0.0.0
cafile /etc/mosquitto/certificates/ca.crt
certfile /etc/mosquitto/certificates/mqtt.crt
keyfile /etc/mosquitto/certificates/mqtt.key
tls_version tlsv1.2  # Принудително използване на TLS 1.2+

# Сигурност
allow_anonymous false
password_file /etc/mosquitto/passwd  # Файл с потребители/пароли
acl_file /etc/mosquitto/acls  # Файл с ACL правила

# Оптимизации
set_tcp_nodelay true  # По-добра мрежова ефективност
message_size_limit 268435455  # ~256MB максимален размер на съобщение

## end Mosquitto config example


=> ## mosquitto_user_manager.py ##
import sys
import subprocess
import os

def create_mosquitto_user(user_string):
    """
    Създава Mosquitto потребител с или без парола и задава права за достъп до топик.

    Параметри:
    user_string (str): Стринг във формат 'име:път:парола' или 'име:път'.
                       Ако паролата липсва, потребителят се създава без парола.
    """
    parts = user_string.split(':')
    if not (2 <= len(parts) <= 3):
        print("Грешен формат на стринга. Използвайте 'име:път:парола' или 'име:път'.")
        return

    username = parts[0]
    topic_path = parts[1]
    password = parts[2] if len(parts) == 3 else None

    # 1. Създаване на потребител
    print(f"Създаване на потребител '{username}'...")
    try:
        if password:
            # Използваме stdin за подаване на паролата, за да не се вижда в процесите
            process = subprocess.run(
                ['mosquitto_passwd', '-b', '/etc/mosquitto/passwd', username, password],
                capture_output=True, text=True, check=True
            )
        else:
            # -D за деактивиране на подкана за парола, когато не се подава такава
            process = subprocess.run(
                ['mosquitto_passwd', '-D', '/etc/mosquitto/passwd', username],
                capture_output=True, text=True, check=True
            )
        print(f"Потребител '{username}' успешно създаден/актуализиран.")
        if process.stdout:
            print("Изход от mosquitto_passwd:", process.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Грешка при създаване на потребител '{username}': {e.stderr}")
        return
    except FileNotFoundError:
        print("Грешка: mosquitto_passwd командата не е намерена. Уверете се, че Mosquitto е инсталиран и е в PATH.")
        return

    # 2. Добавяне на ACL (Access Control List) правила
    acl_file_path = '/etc/mosquitto/acls'

    # Уверете се, че директорията съществува
    os.makedirs(os.path.dirname(acl_file_path), exist_ok=True)

    acl_rule = f"\nuser {username}\ntopic readwrite {topic_path}/#\n"

    try:
        with open(acl_file_path, 'a') as f:
            f.write(acl_rule)
        print(f"Правила за достъп добавени за потребител '{username}' към '{topic_path}/#'.")
        print("Не забравяйте да рестартирате Mosquitto услугата, за да влязат промените в сила.")
    except IOError as e:
        print(f"Грешка при запис в ACL файла '{acl_file_path}': {e}")
    except Exception as e:
        print(f"Неочаквана грешка: {e}")

# Пример за използване:
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Употреба: python mosquitto_user_manager.py 'user:topic:pass'")
        sys.exit(1)

    input_str = sys.argv[1]
    create_mosquitto_user(input_str)
<= ## end mosquitto_user_manager.py ##

=> ## python script with reconect ##
import paho.mqtt.client as mqtt
import time

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Успешно свързване с MQTT брокер")
        client.subscribe("your/topic")  # Ре-абониране при повторно свързване
    else:
        print(f"Грешка при свързване. Код: {rc}")

def on_disconnect(client, userdata, rc):
    print(f"Прекъсната връзка с код: {rc}")
    if rc != 0:
        print("Опит за повторно свързване...")
        reconnect(client)

def on_message(client, userdata, msg):
    print(f"Получено съобщение: {msg.topic} {str(msg.payload.decode())}")

def reconnect(client):
    while True:
        try:
            print("Опит за повторно свързване...")
            client.reconnect()
            return
        except Exception as e:
            print(f"Грешка при повторно свързване: {e}")
            time.sleep(5)  # Изчакване преди следващ опит

client = mqtt.Client(client_id="your_client_id")
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect

# Задаване на потребител/парола ако е нужно
# client.username_pw_set("username", "password")

try:
    client.connect("broker.hivemq.com", 1883, 60)
except Exception as e:
    print(f"Грешка при първоначално свързване: {e}")
    reconnect(client)

client.loop_forever()  # Това автоматично ще се опита да се свърже отново при прекъсване
<= ## python script with reconect ##
