Работа с масиви в PHP, включително и array_column():

array_change_key_case() - Връща масив с всички ключове от масива преобразувани в главни или малки букви.
array_chunk() - Разделя масива на множество масиви с посочения брой елементи.
array_column() - Връща стойностите от един колона на входния масив.
array_combine() - Създава масив, като използва един масив за ключове и друг за неговите стойности.
array_count_values() - Преброява всички стойности на масива.
array_diff() - Изчислява разликата между масиви.
array_diff_assoc() - Изчислява разликата между масиви с допълнителна проверка на ключовете.
array_diff_key() - Изчислява разликата между ключовете на масивите.
array_fill() - Попълва масив със стойности.
array_fill_keys() - Създава масив, попълнен със стойности, като използва зададен масив за ключове.
array_flip() - Разменя всички ключове с техните стойности в масива.
array_intersect() - Изчислява сечението на масиви.
array_intersect_assoc() - Изчислява сечението на масиви с допълнителна проверка на ключовете.
array_intersect_key() - Изчислява сечението на масиви, използвайки ключовете за сравнение.
array_key_first() - Взима първия ключ на масива.
array_key_last() - Взима последния ключ на масива.
array_map() - Комбинира два обикновенни масива в един асоциативен.
array_multisort() - Сортира множество масиви или многомерни масиви.
array_pad() - Допълва масив до определена дължина със стойност.
array_product() - Произведение на стойностите в масива.
array_rand() - Взима един или повече случайни ключове от масив.
array_reduce() - Итеративно намалява масив до една стойност, използвайки callback функция.
array_replace() - Заменя елементи от първия масив със стойности от следващите масиви.
array_replace_recursive() - Рекурсивно заменя елементи от първия масив с елементи от следващите масиви.
array_reverse() - Връща масив с елементите в обратен ред.
array_search() - Търси в масива и връща ключа за съответната стойност, ако тя се намира в масива.
array_sum() - Сумира стойностите в масива.
array_udiff() - Изчислява разликата между масиви с помощта на callback функция за сравнение на данните.
array_udiff_assoc() - Изчислява разликата между масиви с допълнителни callback функции за сравнение на ключовете.
array_udiff_uassoc() - Изчислява разликата между масиви с callback функции както за сравнение на данните, така и за ключовете.
array_uintersect() - Изчислява сечението на масиви, сравнявайки данните с callback функция.
array_uintersect_assoc() - Изчислява сечението на масиви, сравнявайки данните и ключовете с отделни callback функции.
array_uintersect_uassoc() - Изчислява сечението на масиви с две callback функции.
array_unique() - Премахва дубликатите от масива.
array_unshift() - Добавя един или повече елементи в началото на масива.
array_values() - Връща всички стойности на масива.
array_walk() - Прилага зададена функция към всеки елемент на масива.
array_walk_recursive() - Прилага зададена функция рекурсивно към всеки елемент на масива.
arsort() - Сортира масив и поддържа асоциациите на индексите.
asort() - Сортира масив и поддържа асоциациите на индексите (запазва ключовете).

# Example
<?php
// Първоначален масив с хора
$people = [
    ['name' => 'Alice', 'age' => 34],
    ['name' => 'Bob Jr.', 'age' => 15],
    ['name' => 'Charlie', 'age' => 23],
    ['name' => 'Alice', 'age' => 26],
    ['name' => 'Bob', 'age' => 37],
];

// 1. Филтриране на хората, които са на възраст над 18
$adults = array_filter($people, function ($person) {
    return $person['age'] >= 18;
});

// 2. Сортиране на масива по възраст
usort($adults, function ($a, $b) {
    return $a['age'] <=> $b['age'];
});

// 3. Извличане на колоната с имената
$names = array_column($adults, 'name');

// 4. Преброяване колко пъти се среща всяко име
$nameCount = array_count_values($names);

echo "Пълнолетни сортирани по възраст:\n";
print_r($names);

echo "Брой на срещанията на всяко име:\n";
print_r($nameCount);

// 5. Преобразуване в асоциативен масив "Alice" => 34, ...
$keys = array_column($adults, 'name');
$values = array_column($adults, 'age');
$name_age = array_combine($keys, $values);
$name_age = array_column($adults, 'age', 'name');  // !!! Оптимизиран вариант


